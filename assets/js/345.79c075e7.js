(window.webpackJsonp=window.webpackJsonp||[]).push([[345],{386:function(t,a,e){"use strict";e.r(a);var n=e(13),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"字符处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符处理"}},[t._v("#")]),t._v(" 字符处理")]),t._v(" "),e("p",[t._v("1、"),e("code",[t._v("str.capitalize()")])]),t._v(" "),e("p",[t._v("用于字体转化,每个单词首字母大写")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    str="hello world"\n    print(str.capitalize())\n    #输出 Hello World\n')])])]),e("p",[t._v("2、"),e("code",[t._v("str.replace()")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\t#字符替换\n\n    str="hello world"\n    str.replace("o",\'888\')\n    #输出 hell88 w88rld\n')])])]),e("p",[t._v("3、"),e("code",[t._v("str.split()")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t#用于字符切割\n    ip='192.168.1.120'\n    ip.split('.')\n    #输出 ['192', '167', '1', '123']\n    ip.split('.',2) \n    #字符切割次，结果是\n    #['192', '167', '1.123']\n")])])]),e("h2",{attrs:{id:"序列处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#序列处理"}},[t._v("#")]),t._v(" 序列处理")]),t._v(" "),e("h3",{attrs:{id:"range-函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#range-函数"}},[t._v("#")]),t._v(" range()函数")]),t._v(" "),e("p",[e("code",[t._v("range()")]),t._v(" 是python的内置函数，用于取一定范围的list列表")]),t._v(" "),e("blockquote",[e("p",[t._v("! 注意："),e("code",[t._v("range(1,5)")]),t._v("在"),e("code",[t._v("python3")]),t._v("中是不会直接输出列表的,但是列表已经生成")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    #举个栗子\n\n    #本案例环境为 Python3.5.2\n    range(1,5)\n    list(range(1,10))\n    list(range(1,10,2))\n     \n\n    #运行结果\n\n    range(1,5)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    [1, 3, 5, 7, 9]\n")])])]),e("h3",{attrs:{id:"map-函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#map-函数"}},[t._v("#")]),t._v(" map()函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    map(func,list1,listb,....)\n")])])]),e("p",[t._v("大概的工作流程")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("先将所有的列表进行"),e("code",[t._v("并行变遍历")])])]),t._v(" "),e("li",[e("p",[t._v("每次遍历的元素，重新组合成一个新的列表")])]),t._v(" "),e("li",[e("p",[t._v("如果有 函数"),e("code",[t._v("func")]),t._v("，则对列表元素用该函数进行处理")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    #举个栗子\n\n    a=[1,2,3]\n    b=[4,5,6]\n    def f(x,y):\n        return x*y\n    list1=list(map(None,a,b))\n    print(list1)\n    list2=list(map(f,a,b))\n    print(list2)\n     \n\n    #运行结果\n\n    [(1,4),(2,5),(3,6)]\n    [4,10,18]\n")])])]),e("h3",{attrs:{id:"reduce-函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reduce-函数"}},[t._v("#")]),t._v(" reduce()函数")]),t._v(" "),e("p",[t._v("定义：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    reduce(function, sequence[, initial])\n")])])]),e("p",[e("code",[t._v("function")]),t._v("参数是一个有"),e("code",[t._v("两个参数")]),t._v("的函数，reduce依次从"),e("code",[t._v("sequence")]),t._v("中取一个元素，和"),e("code",[t._v("上一次调用function的结果")]),t._v("做参数"),e("code",[t._v("再次调用function")])]),t._v(" "),e("blockquote",[e("p",[t._v("在"),e("code",[t._v("Python 3")]),t._v("里,"),e("code",[t._v("reduce()")]),t._v("函数已经被从全局名字空间里移除了,它现在被放置在"),e("code",[t._v("fucntools")]),t._v("模块里用的话要先引入。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    #举个栗子\n\n    from functools import reduce\n    li=list(range(1,4))\n    print('进行累积的是：',li)\n    def f(x,y):\n        return x*y\n    rr=reduce(f,li)\n    print('结果是',rr)\n    #当初始值为10时 \n    rr2=reduce(f,li,10)\n    print(rr2)\n     \n\n    #运行结果\n\n    进行累积的是： [1, 2, 3]\n    结果是 6\n    60\n")])])]),e("blockquote",[e("p",[t._v("注意：没有给定初始值的时候，初始值为序列的第一个")])]),t._v(" "),e("h3",{attrs:{id:"filter-函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#filter-函数"}},[t._v("#")]),t._v(" filter()函数")]),t._v(" "),e("p",[t._v("可以称之为过滤器")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    #举个栗子\n\n    l=range(1,10)\n    def f(x):\n        if x&gt;5:\n            return True\n    lr=filter(f,l)\n    list(lr)\n     \n\n    #运行结果\n\n    [6, 7, 8, 9]\n\n")])])]),e("h3",{attrs:{id:"zip-函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#zip-函数"}},[t._v("#")]),t._v(" zip()函数")]),t._v(" "),e("p",[t._v("对列表进行并行排序")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    #举个栗子\n\n    a=[1,2,3]\n    b=[4,5,6]\n    c=['A','B']\n    zip(a,b)\n    zip(a,b,c)\n     \n\n    #运行结果\n\n    [(1,4),(2,5),(3,6)]\n    [(1,4,A),(2,5,B)]\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);