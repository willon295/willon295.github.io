(window.webpackJsonp=window.webpackJsonp||[]).push([[323],{442:function(t,a,s){"use strict";s.r(a);var r=s(13),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_13-1-项目规划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-1-项目规划"}},[t._v("#")]),t._v(" 13.1 项目规划")]),t._v(" "),s("p",[t._v("做任何事情都需要做好规划，那么我们在开发博客系统之前，同样需要做好项目的规划，如何设置目录结构，如何理解整个项目的流程图，当我们理解了应用的执行过程，那么接下来的设计编码就会变得相对容易了")]),t._v(" "),s("h2",{attrs:{id:"gopath以及项目设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gopath以及项目设置"}},[t._v("#")]),t._v(" gopath以及项目设置")]),t._v(" "),s("p",[t._v("假设指定gopath是文件系统的普通目录名，当然我们可以随便设置一个目录名，然后将其路径存入GOPATH。前面介绍过GOPATH可以是多个目录：在window系统设置环境变量；在linux/MacOS系统只要输入终端命令"),s("code",[t._v("export gopath=/home/astaxie/gopath")]),t._v("，但是必须保证gopath这个代码目录下面有三个目录pkg、bin、src。新建项目的源码放在src目录下面，现在暂定我们的博客目录叫做beeblog，下面是在window下的环境变量和目录结构的截图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"images/13.1.gopath.png?raw=true",alt:""}})]),t._v(" "),s("p",[t._v("图13.1 环境变量GOPATH设置")]),t._v(" "),s("p",[s("img",{attrs:{src:"images/13.1.gopath2.png?raw=true",alt:""}})]),t._v(" "),s("p",[t._v("图13.2 工作目录在$gopath/src下")]),t._v(" "),s("h2",{attrs:{id:"应用程序流程图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用程序流程图"}},[t._v("#")]),t._v(" 应用程序流程图")]),t._v(" "),s("p",[t._v("博客系统是基于模型-视图-控制器这一设计模式的。MVC是一种将应用程序的逻辑层和表现层进行分离的结构方式。在实践中，由于表现层从Go中分离了出来，所以它允许你的网页中只包含很少的脚本。")]),t._v(" "),s("ul",[s("li",[t._v("模型 (Model) 代表数据结构。通常来说，模型类将包含取出、插入、更新数据库资料等这些功能。")]),t._v(" "),s("li",[t._v("视图 (View) 是展示给用户的信息的结构及样式。一个视图通常是一个网页，但是在Go中，一个视图也可以是一个页面片段，如页头、页尾。它还可以是一个 RSS 页面，或其它类型的“页面”，Go实现的template包已经很好的实现了View层中的部分功能。")]),t._v(" "),s("li",[t._v("控制器 (Controller) 是模型、视图以及其他任何处理HTTP请求所必须的资源之间的中介，并生成网页。")])]),t._v(" "),s("p",[t._v("下图显示了项目设计中框架的数据流是如何贯穿整个系统:")]),t._v(" "),s("p",[s("img",{attrs:{src:"images/13.1.flow.png?raw=true",alt:""}})]),t._v(" "),s("p",[t._v("图13.3 框架的数据流")]),t._v(" "),s("ol",[s("li",[t._v("main.go作为应用入口，初始化一些运行博客所需要的基本资源，配置信息，监听端口。")]),t._v(" "),s("li",[t._v("路由功能检查HTTP请求，根据URL以及method来确定谁(控制层)来处理请求的转发资源。")]),t._v(" "),s("li",[t._v("如果缓存文件存在，它将绕过通常的流程执行，被直接发送给浏览器。")]),t._v(" "),s("li",[t._v("安全检测：应用程序控制器调用之前，HTTP请求和任一用户提交的数据将被过滤。")]),t._v(" "),s("li",[t._v("控制器装载模型、核心库、辅助函数，以及任何处理特定请求所需的其它资源，控制器主要负责处理业务逻辑。")]),t._v(" "),s("li",[t._v("输出视图层中渲染好的即将发送到Web浏览器中的内容。如果开启缓存，视图首先被缓存，将用于以后的常规请求。")])]),t._v(" "),s("h2",{attrs:{id:"目录结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[t._v("#")]),t._v(" 目录结构")]),t._v(" "),s("p",[t._v("根据上面的应用程序流程设计，博客的目录结构设计如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("|——main.go         入口文件\n|——conf            配置文件和处理模块\n|——controllers     控制器入口\n|——models          数据库处理模块\n|——utils           辅助函数库\n|——static          静态文件目录\n|——views           视图库\n")])])]),s("h2",{attrs:{id:"框架设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#框架设计"}},[t._v("#")]),t._v(" 框架设计")]),t._v(" "),s("p",[t._v("为了实现博客的快速搭建，打算基于上面的流程设计开发一个最小化的框架，框架包括路由功能、支持REST的控制器、自动化的模板渲染，日志系统、配置管理等。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("本小节介绍了博客系统从设置GOPATH到目录建立这样的基础信息，也简单介绍了框架结构采用的MVC模式，博客系统中数据流的执行流程，最后通过这些流程设计了博客系统的目录结构，至此，我们基本完成一个框架的搭建，接下来的几个小节我们将会逐个实现。")]),t._v(" "),s("h2",{attrs:{id:"links"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#links"}},[t._v("#")]),t._v(" links")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/编程语言/Go/preface.html"}},[t._v("目录")])],1),t._v(" "),s("li",[t._v("上一章: "),s("RouterLink",{attrs:{to:"/编程语言/Go/13.0.html"}},[t._v("构建博客系统")])],1),t._v(" "),s("li",[t._v("下一节: "),s("RouterLink",{attrs:{to:"/编程语言/Go/13.2.html"}},[t._v("自定义路由器设计")])],1)])])}),[],!1,null,null,null);a.default=v.exports}}]);