(window.webpackJsonp=window.webpackJsonp||[]).push([[251],{276:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_2-2-go基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-go基础"}},[t._v("#")]),t._v(" 2.2 Go基础")]),t._v(" "),a("p",[t._v("这小节我们将要介绍如何定义变量、常量、Go内置类型以及Go程序设计中的一些技巧。")]),t._v(" "),a("h2",{attrs:{id:"定义变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义变量"}},[t._v("#")]),t._v(" 定义变量")]),t._v(" "),a("p",[t._v("Go语言里面定义变量有多种方式。")]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("var")]),t._v("关键字是Go最基本的定义变量方式，与C语言不同的是Go把变量类型放在变量名后面：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//定义一个名称为“variableName”，类型为"type"的变量')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" variableName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v("\n")])])]),a("p",[t._v("定义多个变量")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义三个类型都是“type”的变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" vname1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vname2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vname3 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v("\n")])])]),a("p",[t._v("定义变量并初始化值")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//初始化“variableName”的变量为“value”值，类型是“type”")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" variableName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n")])])]),a("p",[t._v("同时初始化多个变量")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n\t定义三个类型都是"type"的变量,并且分别初始化为相应的值\n\tvname1为v1，vname2为v2，vname3为v3\n*/')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" vname1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vname2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vname3 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v3\n")])])]),a("p",[t._v("你是不是觉得上面这样的定义有点繁琐？没关系，因为Go语言的设计者也发现了，有一种写法可以让它变得简单一点。我们可以直接忽略类型声明，那么上面的代码变成这样了：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n\t定义三个变量，它们分别初始化为相应的值\n\tvname1为v1，vname2为v2，vname3为v3\n\t然后Go会根据其相应值的类型来帮你初始化它们\n*/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" vname1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vname2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vname3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v3\n")])])]),a("p",[t._v("你觉得上面的还是有些繁琐？好吧，我也觉得。让我们继续简化：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n\t定义三个变量，它们分别初始化为相应的值\n\tvname1为v1，vname2为v2，vname3为v3\n\t编译器会根据初始化的值自动推导出相应的类型\n*/")]),t._v("\nvname1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vname2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vname3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v3\n")])])]),a("p",[t._v("现在是不是看上去非常简洁了？"),a("code",[t._v(":=")]),t._v("这个符号直接取代了"),a("code",[t._v("var")]),t._v("和"),a("code",[t._v("type")]),t._v(",这种形式叫做简短声明。不过它有一个限制，那就是它只能用在函数内部；在函数外部使用则会无法编译通过，所以一般用"),a("code",[t._v("var")]),t._v("方式来定义全局变量。")]),t._v(" "),a("p",[a("code",[t._v("_")]),t._v("（下划线）是个特殊的变量名，任何赋予它的值都会被丢弃。在这个例子中，我们将值"),a("code",[t._v("35")]),t._v("赋予"),a("code",[t._v("b")]),t._v("，并同时丢弃"),a("code",[t._v("34")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("_, b := 34, 35\n")])])]),a("p",[t._v("Go对于已声明但未使用的变量会在编译阶段报错，比如下面的代码就会产生一个错误：声明了"),a("code",[t._v("i")]),t._v("但未使用。")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[t._v("#")]),t._v(" 常量")]),t._v(" "),a("p",[t._v("所谓常量，也就是在程序编译阶段就确定下来的值，而程序在运行时无法改变该值。在Go程序中，常量可定义为数值、布尔值或字符串等类型。")]),t._v(" "),a("p",[t._v("它的语法如下：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" constantName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果需要，也可以明确指定常量的类型：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Pi "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1415926")]),t._v("\n")])])]),a("p",[t._v("下面是一些常量声明的例子：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Pi "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1415926")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" MaxThread "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prefix "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"astaxie_"')]),t._v("\n")])])]),a("p",[t._v("Go 常量和一般程序语言不同的是，可以指定相当多的小数位数(例如200位)，\n若指定給float32自动缩短为32bit，指定给float64自动缩短为64bit，详情参考"),a("a",{attrs:{href:"http://golang.org/ref/spec#Constants",target:"_blank",rel:"noopener noreferrer"}},[t._v("链接"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"内置基础类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置基础类型"}},[t._v("#")]),t._v(" 内置基础类型")]),t._v(" "),a("h3",{attrs:{id:"boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean"}},[t._v("#")]),t._v(" Boolean")]),t._v(" "),a("p",[t._v("在Go中，布尔值的类型为"),a("code",[t._v("bool")]),t._v("，值是"),a("code",[t._v("true")]),t._v("或"),a("code",[t._v("false")]),t._v("，默认为"),a("code",[t._v("false")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//示例代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" isActive "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全局变量声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" enabled"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" disabled "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 忽略类型的声明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" available "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一般声明")]),t._v("\n\tvalid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 简短声明")]),t._v("\n\tavailable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 赋值操作")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"数值类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值类型"}},[t._v("#")]),t._v(" 数值类型")]),t._v(" "),a("p",[t._v("整数类型有无符号和带符号两种。Go同时支持"),a("code",[t._v("int")]),t._v("和"),a("code",[t._v("uint")]),t._v("，这两种类型的长度相同，但具体长度取决于不同编译器的实现。Go里面也有直接定义好位数的类型："),a("code",[t._v("rune")]),t._v(", "),a("code",[t._v("int8")]),t._v(", "),a("code",[t._v("int16")]),t._v(", "),a("code",[t._v("int32")]),t._v(", "),a("code",[t._v("int64")]),t._v("和"),a("code",[t._v("byte")]),t._v(", "),a("code",[t._v("uint8")]),t._v(", "),a("code",[t._v("uint16")]),t._v(", "),a("code",[t._v("uint32")]),t._v(", "),a("code",[t._v("uint64")]),t._v("。其中"),a("code",[t._v("rune")]),t._v("是"),a("code",[t._v("int32")]),t._v("的别称，"),a("code",[t._v("byte")]),t._v("是"),a("code",[t._v("uint8")]),t._v("的别称。")]),t._v(" "),a("blockquote",[a("p",[t._v("需要注意的一点是，这些类型的变量之间不允许互相赋值或操作，不然会在编译时引起编译器报错。")]),t._v(" "),a("p",[t._v("如下的代码会产生错误：invalid operation: a + b (mismatched types int8 and int32)")]),t._v(" "),a("blockquote",[a("p",[t._v("var a int8")])])]),t._v(" "),a("blockquote",[a("blockquote",[a("p",[t._v("var b int32")])])]),t._v(" "),a("blockquote",[a("blockquote",[a("p",[t._v("c:=a + b")])]),t._v(" "),a("p",[t._v("另外，尽管int的长度是32 bit, 但int 与 int32并不可以互用。")])]),t._v(" "),a("p",[t._v("浮点数的类型有"),a("code",[t._v("float32")]),t._v("和"),a("code",[t._v("float64")]),t._v("两种（没有"),a("code",[t._v("float")]),t._v("类型），默认是"),a("code",[t._v("float64")]),t._v("。")]),t._v(" "),a("p",[t._v("这就是全部吗？No！Go还支持复数。它的默认类型是"),a("code",[t._v("complex128")]),t._v("（64位实数+64位虚数）。如果需要小一些的，也有"),a("code",[t._v("complex64")]),t._v("(32位实数+32位虚数)。复数的形式为"),a("code",[t._v("RE + IMi")]),t._v("，其中"),a("code",[t._v("RE")]),t._v("是实数部分，"),a("code",[t._v("IM")]),t._v("是虚数部分，而最后的"),a("code",[t._v("i")]),t._v("是虚数单位。下面是一个使用复数的例子：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex64")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5i")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//output: (5+5i)")]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value is: %v"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),a("p",[t._v("我们在上一节中讲过，Go中的字符串都是采用"),a("code",[t._v("UTF-8")]),t._v("字符集编码。字符串是用一对双引号（"),a("code",[t._v('""')]),t._v("）或反引号（"),a("code",[t._v("`")]),t._v(" "),a("code",[t._v("`")]),t._v("）括起来定义，它的类型是"),a("code",[t._v("string")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//示例代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" frenchHello "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明变量为字符串的一般方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" emptyString "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明了一个字符串变量，初始化为空字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" yes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maybe "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"no"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yes"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"maybe"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 简短声明，同时声明多个变量")]),t._v("\n\tjapaneseHello "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Konichiwa"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同上")]),t._v("\n\tfrenchHello "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bonjour"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 常规赋值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在Go中字符串是不可变的，例如下面的代码编译时会报错：cannot assign to s[0]")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\ns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'c'")]),t._v("\n\n")])])]),a("p",[t._v("但如果真的想要修改怎么办呢？下面的代码可以实现：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将字符串 s 转换为 []byte 类型")]),t._v("\nc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'c'")]),t._v("\ns2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再转换回 string 类型")]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Go中可以使用"),a("code",[t._v("+")]),t._v("操作符来连接两个字符串：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello,"')]),t._v("\nm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" world"')]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" m\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("修改字符串也可写为：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串虽不能更改，但可进行切片操作")]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如果要声明一个多行的字符串怎么办？可以通过"),a("code",[t._v("`")]),t._v("来声明：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("m := `hello\n\tworld`\n")])])]),a("p",[a("code",[t._v("`")]),t._v(" 括起的字符串为Raw字符串，即字符串在代码中的形式就是打印时的形式，它没有字符转义，换行也将原样输出。例如本例中会输出：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("hello\n\tworld\n")])])]),a("h3",{attrs:{id:"错误类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误类型"}},[t._v("#")]),t._v(" 错误类型")]),t._v(" "),a("p",[t._v("Go内置有一个"),a("code",[t._v("error")]),t._v("类型，专门用来处理错误信息，Go的"),a("code",[t._v("package")]),t._v("里面还专门有一个包"),a("code",[t._v("errors")]),t._v("来处理错误：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\nerr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" errors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("New")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"emit macho dwarf: elf header corrupted"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"go数据底层的存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go数据底层的存储"}},[t._v("#")]),t._v(" Go数据底层的存储")]),t._v(" "),a("p",[t._v("下面这张图来源于"),a("a",{attrs:{href:"http://research.swtch.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Russ Cox Blog"),a("OutboundLink")],1),t._v("中一篇介绍"),a("a",{attrs:{href:"http://research.swtch.com/godata",target:"_blank",rel:"noopener noreferrer"}},[t._v("Go数据结构"),a("OutboundLink")],1),t._v("的文章，大家可以看到这些基础类型底层都是分配了一块内存，然后存储了相应的值。")]),t._v(" "),a("p",[a("img",{attrs:{src:"images/2.2.basic.png?raw=true",alt:""}})]),t._v(" "),a("p",[t._v("图2.1 Go数据格式的存储")]),t._v(" "),a("h2",{attrs:{id:"一些技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些技巧"}},[t._v("#")]),t._v(" 一些技巧")]),t._v(" "),a("h3",{attrs:{id:"分组声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组声明"}},[t._v("#")]),t._v(" 分组声明")]),t._v(" "),a("p",[t._v("在Go语言中，同时声明多个常量、变量，或者导入多个包时，可采用分组的方式进行声明。")]),t._v(" "),a("p",[t._v("例如下面的代码：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"os"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" pi "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1415")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prefix "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Go_"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pi "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" prefix "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n")])])]),a("p",[t._v("可以分组写成如下形式：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"os"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\ti "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n\tpi "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1415")]),t._v("\n\tprefix "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Go_"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\ti "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\tpi "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),t._v("\n\tprefix "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"iota枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iota枚举"}},[t._v("#")]),t._v(" iota枚举")]),t._v(" "),a("p",[t._v("Go里面有一个关键字"),a("code",[t._v("iota")]),t._v("，这个关键字用来声明"),a("code",[t._v("enum")]),t._v("的时候采用，它默认开始值是0，const中每增加一行加1：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// x == 0")]),t._v("\n\ty "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// y == 1")]),t._v("\n\tz "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// z == 2")]),t._v("\n\tw        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 常量声明省略值时，默认和之前一个值的字面相同。这里隐式地说w = iota，因此w == 3。其实上面y和z可同样不用"= iota"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每遇到一个const关键字，iota就会重置，此时v == 0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\th"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//h=0,i=0,j=0 iota在同一行值相同")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\ta       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a=0")]),t._v("\n\tb       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B"')]),t._v("\n\tc       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//c=2")]),t._v("\n\td"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//d=3,e=3,f=3")]),t._v("\n\tg       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("iota")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//g = 4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("除非被显式设置为其它值或"),a("code",[t._v("iota")]),t._v("，每个"),a("code",[t._v("const")]),t._v("分组的第一个常量被默认设置为它的0值，第二及后续的常量被默认设置为它前面那个常量的值，如果前面那个常量的值是"),a("code",[t._v("iota")]),t._v("，则它也被设置为"),a("code",[t._v("iota")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"go程序设计的一些规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go程序设计的一些规则"}},[t._v("#")]),t._v(" Go程序设计的一些规则")]),t._v(" "),a("p",[t._v("Go之所以会那么简洁，是因为它有一些默认的行为：")]),t._v(" "),a("ul",[a("li",[t._v("大写字母开头的变量是可导出的，也就是其它包可以读取的，是公有变量；小写字母开头的就是不可导出的，是私有变量。")]),t._v(" "),a("li",[t._v("大写字母开头的函数也是一样，相当于"),a("code",[t._v("class")]),t._v("中的带"),a("code",[t._v("public")]),t._v("关键词的公有函数；小写字母开头的就是有"),a("code",[t._v("private")]),t._v("关键词的私有函数。")])]),t._v(" "),a("h2",{attrs:{id:"array、slice、map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array、slice、map"}},[t._v("#")]),t._v(" array、slice、map")]),t._v(" "),a("h3",{attrs:{id:"array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[t._v("#")]),t._v(" array")]),t._v(" "),a("p",[a("code",[t._v("array")]),t._v("就是数组，它的定义方式如下：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v("\n")])])]),a("p",[t._v("在"),a("code",[t._v("[n]type")]),t._v("中，"),a("code",[t._v("n")]),t._v("表示数组的长度，"),a("code",[t._v("type")]),t._v("表示存储元素的类型。对数组的操作和其它语言类似，都是通过"),a("code",[t._v("[]")]),t._v("来进行读取或赋值：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明了一个int类型的数组")]),t._v("\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组下标是从0开始的")]),t._v("\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 赋值操作")]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The first element is %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取数据，返回42")]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The last element is %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回未赋值的最后一个元素，默认返回0")]),t._v("\n")])])]),a("p",[t._v("由于长度也是数组类型的一部分，因此"),a("code",[t._v("[3]int")]),t._v("与"),a("code",[t._v("[4]int")]),t._v("是不同的类型，数组也就不能改变长度。数组之间的赋值是值的赋值，即当把一个数组作为参数传入函数的时候，传入的其实是该数组的副本，而不是它的指针。如果要使用指针，那么就需要用到后面介绍的"),a("code",[t._v("slice")]),t._v("类型了。")]),t._v(" "),a("p",[t._v("数组可以使用另一种"),a("code",[t._v(":=")]),t._v("来声明")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明了一个长度为3的int数组")]),t._v("\n\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明了一个长度为10的int数组，其中前三个元素初始化为1、2、3，其它默认为0")]),t._v("\n\nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以省略长度而采用`...`的方式，Go会自动根据元素个数来计算长度")]),t._v("\n")])])]),a("p",[t._v("也许你会说，我想数组里面的值还是数组，能实现吗？当然咯，Go支持嵌套数组，即多维数组。比如下面的代码就声明了一个二维数组：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明了一个二维数组，该数组以两个数组作为元素，其中每个数组中又有4个int类型的元素")]),t._v("\ndoubleArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上面的声明可以简化，直接忽略内部的类型")]),t._v("\neasyArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("数组的分配如下所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"images/2.2.array.png?raw=true",alt:""}})]),t._v(" "),a("p",[t._v("图2.2 多维数组的映射关系")]),t._v(" "),a("h3",{attrs:{id:"slice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#slice"}},[t._v("#")]),t._v(" slice")]),t._v(" "),a("p",[t._v("在很多应用场景中，数组并不能满足我们的需求。在初始定义数组时，我们并不知道需要多大的数组，因此我们就需要“动态数组”。在Go里面这种数据结构叫"),a("code",[t._v("slice")])]),t._v(" "),a("p",[a("code",[t._v("slice")]),t._v("并不是真正意义上的动态数组，而是一个引用类型。"),a("code",[t._v("slice")]),t._v("总是指向一个底层"),a("code",[t._v("array")]),t._v("，"),a("code",[t._v("slice")]),t._v("的声明也可以像"),a("code",[t._v("array")]),t._v("一样，只是不需要长度。")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 和声明array一样，只是少了长度")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fslice "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n")])])]),a("p",[t._v("接下来我们可以声明一个"),a("code",[t._v("slice")]),t._v("，并初始化数据，如下所示：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\nslice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("slice")]),t._v("可以从一个数组或一个已经存在的"),a("code",[t._v("slice")]),t._v("中再次声明。"),a("code",[t._v("slice")]),t._v("通过"),a("code",[t._v("array[i:j]")]),t._v("来获取，其中"),a("code",[t._v("i")]),t._v("是数组的开始位置，"),a("code",[t._v("j")]),t._v("是结束位置，但不包含"),a("code",[t._v("array[j]")]),t._v("，它的长度是"),a("code",[t._v("j-i")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明一个含有10个元素元素类型为byte的数组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'e'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'f'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'g'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'h'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'i'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'j'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明两个含有byte的slice")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a指向数组的第3个元素开始，并到第五个元素结束，")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//现在a含有的元素: ar[2]、ar[3]和ar[4]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b是数组ar的另一个slice")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b的元素是：ar[3]和ar[4]")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("注意"),a("code",[t._v("slice")]),t._v("和数组在声明时的区别：声明数组时，方括号内写明了数组的长度或使用"),a("code",[t._v("...")]),t._v("自动计算长度，而声明"),a("code",[t._v("slice")]),t._v("时，方括号内没有任何字符。")])]),t._v(" "),a("p",[t._v("它们的数据结构如下所示")]),t._v(" "),a("p",[a("img",{attrs:{src:"images/2.2.slice.png?raw=true",alt:""}})]),t._v(" "),a("p",[t._v("图2.3 slice和array的对应关系图")]),t._v(" "),a("p",[t._v("slice有一些简便的操作")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("slice")]),t._v("的默认开始位置是0，"),a("code",[t._v("ar[:n]")]),t._v("等价于"),a("code",[t._v("ar[0:n]")])]),t._v(" "),a("li",[a("code",[t._v("slice")]),t._v("的第二个序列默认是数组的长度，"),a("code",[t._v("ar[n:]")]),t._v("等价于"),a("code",[t._v("ar[n:len(ar)]")])]),t._v(" "),a("li",[t._v("如果从一个数组里面直接获取"),a("code",[t._v("slice")]),t._v("，可以这样"),a("code",[t._v("ar[:]")]),t._v("，因为默认第一个序列是0，第二个是数组的长度，即等价于"),a("code",[t._v("ar[0:len(ar)]")])])]),t._v(" "),a("p",[t._v("下面这个例子展示了更多关于"),a("code",[t._v("slice")]),t._v("的操作：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明一个数组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" array "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'e'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'f'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'g'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'h'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'i'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'j'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明两个slice")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" aSlice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bSlice "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 演示一些简便操作")]),t._v("\naSlice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于aSlice = array[0:3] aSlice包含元素: a,b,c")]),t._v("\naSlice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于aSlice = array[5:10] aSlice包含元素: f,g,h,i,j")]),t._v("\naSlice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于aSlice = array[0:10] 这样aSlice包含了全部的元素")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从slice中获取slice")]),t._v("\naSlice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// aSlice包含元素: d,e,f,g，len=4，cap=7")]),t._v("\nbSlice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" aSlice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bSlice 包含aSlice[1], aSlice[2] 也就是含有: e,f")]),t._v("\nbSlice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" aSlice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bSlice 包含 aSlice[0], aSlice[1], aSlice[2] 也就是含有: d,e,f")]),t._v("\nbSlice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" aSlice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对slice的slice可以在cap范围内扩展，此时bSlice包含：d,e,f,g,h")]),t._v("\nbSlice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" aSlice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bSlice包含所有aSlice的元素: d,e,f,g")]),t._v("\n")])])]),a("p",[a("code",[t._v("slice")]),t._v("是引用类型，所以当引用改变其中元素的值时，其它的所有引用都会改变该值，例如上面的"),a("code",[t._v("aSlice")]),t._v("和"),a("code",[t._v("bSlice")]),t._v("，如果修改了"),a("code",[t._v("aSlice")]),t._v("中元素的值，那么"),a("code",[t._v("bSlice")]),t._v("相对应的值也会改变。")]),t._v(" "),a("p",[t._v("从概念上面来说"),a("code",[t._v("slice")]),t._v("像一个结构体，这个结构体包含了三个元素：")]),t._v(" "),a("ul",[a("li",[t._v("一个指针，指向数组中"),a("code",[t._v("slice")]),t._v("指定的开始位置")]),t._v(" "),a("li",[t._v("长度，即"),a("code",[t._v("slice")]),t._v("的长度")]),t._v(" "),a("li",[t._v("最大长度，也就是"),a("code",[t._v("slice")]),t._v("开始位置到数组的最后位置的长度")])]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n\tArray_a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'e'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'f'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'g'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'h'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'i'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'j'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tSlice_a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" Array_a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("上面代码的真正存储结构如下图所示")]),t._v(" "),a("p",[a("img",{attrs:{src:"images/2.2.slice2.png?raw=true",alt:""}})]),t._v(" "),a("p",[t._v("图2.4 slice对应数组的信息")]),t._v(" "),a("p",[t._v("对于"),a("code",[t._v("slice")]),t._v("有几个有用的内置函数：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("len")]),t._v("    获取"),a("code",[t._v("slice")]),t._v("的长度")]),t._v(" "),a("li",[a("code",[t._v("cap")]),t._v("    获取"),a("code",[t._v("slice")]),t._v("的最大容量")]),t._v(" "),a("li",[a("code",[t._v("append")]),t._v(" 向"),a("code",[t._v("slice")]),t._v("里面追加一个或者多个元素，然后返回一个和"),a("code",[t._v("slice")]),t._v("一样类型的"),a("code",[t._v("slice")])]),t._v(" "),a("li",[a("code",[t._v("copy")]),t._v("   函数"),a("code",[t._v("copy")]),t._v("从源"),a("code",[t._v("slice")]),t._v("的"),a("code",[t._v("src")]),t._v("中复制元素到目标"),a("code",[t._v("dst")]),t._v("，并且返回复制的元素的个数")])]),t._v(" "),a("p",[t._v("注："),a("code",[t._v("append")]),t._v("函数会改变"),a("code",[t._v("slice")]),t._v("所引用的数组的内容，从而影响到引用同一数组的其它"),a("code",[t._v("slice")]),t._v("。\n但当"),a("code",[t._v("slice")]),t._v("中没有剩余空间（即"),a("code",[t._v("(cap-len) == 0")]),t._v("）时，此时将动态分配新的数组空间。返回的"),a("code",[t._v("slice")]),t._v("数组指针将指向这个空间，而原数组的内容将保持不变；其它引用此数组的"),a("code",[t._v("slice")]),t._v("则不受影响。")]),t._v(" "),a("p",[t._v("从Go1.2开始slice支持了三个参数的slice，之前我们一直采用这种方式在slice或者array基础上来获取一个slice")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" array "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\nslice "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("这个例子里面slice的容量是8，新版本里面可以指定这个容量")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("slice = array[2:4:7]\n")])])]),a("p",[t._v("上面这个的容量就是"),a("code",[t._v("7-2")]),t._v("，即5。这样这个产生的新的slice就没办法访问最后的三个元素。")]),t._v(" "),a("p",[t._v("如果slice是这样的形式"),a("code",[t._v("array[:i:j]")]),t._v("，即第一个参数为空，默认值就是0。")]),t._v(" "),a("h3",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" map")]),t._v(" "),a("p",[a("code",[t._v("map")]),t._v("也就是Python中字典的概念，它的格式为"),a("code",[t._v("map[keyType]valueType")])]),t._v(" "),a("p",[t._v("我们看下面的代码，"),a("code",[t._v("map")]),t._v("的读取和设置也类似"),a("code",[t._v("slice")]),t._v("一样，通过"),a("code",[t._v("key")]),t._v("来操作，只是"),a("code",[t._v("slice")]),t._v("的"),a("code",[t._v("index")]),t._v("只能是｀int｀类型，而"),a("code",[t._v("map")]),t._v("多了很多类型，可以是"),a("code",[t._v("int")]),t._v("，可以是"),a("code",[t._v("string")]),t._v("及所有完全定义了"),a("code",[t._v("==")]),t._v("与"),a("code",[t._v("!=")]),t._v("操作的类型。")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明一个key是字符串，值为int的字典,这种方式的声明需要在使用之前使用make初始化")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" numbers "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 另一种map的声明方式")]),t._v("\nnumbers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nnumbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//赋值")]),t._v("\nnumbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ten"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//赋值")]),t._v("\nnumbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"第三个数字是: "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读取数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印出来如:第三个数字是: 3")]),t._v("\n")])])]),a("p",[t._v("这个"),a("code",[t._v("map")]),t._v("就像我们平常看到的表格一样，左边列是"),a("code",[t._v("key")]),t._v("，右边列是值")]),t._v(" "),a("p",[t._v("使用map过程中需要注意的几点：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("map")]),t._v("是无序的，每次打印出来的"),a("code",[t._v("map")]),t._v("都会不一样，它不能通过"),a("code",[t._v("index")]),t._v("获取，而必须通过"),a("code",[t._v("key")]),t._v("获取")]),t._v(" "),a("li",[a("code",[t._v("map")]),t._v("的长度是不固定的，也就是和"),a("code",[t._v("slice")]),t._v("一样，也是一种引用类型")]),t._v(" "),a("li",[t._v("内置的"),a("code",[t._v("len")]),t._v("函数同样适用于"),a("code",[t._v("map")]),t._v("，返回"),a("code",[t._v("map")]),t._v("拥有的"),a("code",[t._v("key")]),t._v("的数量")]),t._v(" "),a("li",[a("code",[t._v("map")]),t._v("的值可以很方便的修改，通过"),a("code",[t._v('numbers["one"]=11')]),t._v("可以很容易的把key为"),a("code",[t._v("one")]),t._v("的字典值改为"),a("code",[t._v("11")])]),t._v(" "),a("li",[a("code",[t._v("map")]),t._v("和其他基本型别不同，它不是thread-safe，在多个go-routine存取时，必须使用mutex lock机制")])]),t._v(" "),a("p",[a("code",[t._v("map")]),t._v("的初始化可以通过"),a("code",[t._v("key:val")]),t._v("的方式初始化值，同时"),a("code",[t._v("map")]),t._v("内置有判断是否存在"),a("code",[t._v("key")]),t._v("的方式")]),t._v(" "),a("p",[t._v("通过"),a("code",[t._v("delete")]),t._v("删除"),a("code",[t._v("map")]),t._v("的元素：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化一个字典")]),t._v("\nrating "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Go"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Python"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C++"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// map有两个返回值，第二个返回值，如果不存在key，那么ok为false，如果存在ok为true")]),t._v("\ncsharpRating"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ok "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" rating"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C#"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" ok "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C# is in the map and its rating is "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" csharpRating"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"We have no rating associated with C# in the map"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rating"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除key为C的元素")]),t._v("\n\n")])])]),a("p",[t._v("上面说过了，"),a("code",[t._v("map")]),t._v("也是一种引用类型，如果两个"),a("code",[t._v("map")]),t._v("同时指向一个底层，那么一个改变，另一个也相应的改变：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\nm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bonjour"')]),t._v("\nm1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" m\nm1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Salut"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 现在m["hello"]的值已经是Salut了')]),t._v("\n\n")])])]),a("h3",{attrs:{id:"make、new操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#make、new操作"}},[t._v("#")]),t._v(" make、new操作")]),t._v(" "),a("p",[a("code",[t._v("make")]),t._v("用于内建类型（"),a("code",[t._v("map")]),t._v("、"),a("code",[t._v("slice")]),t._v(" 和"),a("code",[t._v("channel")]),t._v("）的内存分配。"),a("code",[t._v("new")]),t._v("用于各种类型的内存分配。")]),t._v(" "),a("p",[t._v("内建函数"),a("code",[t._v("new")]),t._v("本质上说跟其它语言中的同名函数功能一样："),a("code",[t._v("new(T)")]),t._v("分配了零值填充的"),a("code",[t._v("T")]),t._v("类型的内存空间，并且返回其地址，即一个"),a("code",[t._v("*T")]),t._v("类型的值。用Go的术语说，它返回了一个指针，指向新分配的类型"),a("code",[t._v("T")]),t._v("的零值。有一点非常重要：")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("new")]),t._v("返回指针。")])]),t._v(" "),a("p",[t._v("内建函数"),a("code",[t._v("make(T, args)")]),t._v("与"),a("code",[t._v("new(T)")]),t._v("有着不同的功能，make只能创建"),a("code",[t._v("slice")]),t._v("、"),a("code",[t._v("map")]),t._v("和"),a("code",[t._v("channel")]),t._v("，并且返回一个有初始值(非零)的"),a("code",[t._v("T")]),t._v("类型，而不是"),a("code",[t._v("*T")]),t._v("。本质来讲，导致这三个类型有所不同的原因是指向数据结构的引用在使用前必须被初始化。例如，一个"),a("code",[t._v("slice")]),t._v("，是一个包含指向数据（内部"),a("code",[t._v("array")]),t._v("）的指针、长度和容量的三项描述符；在这些项目被初始化之前，"),a("code",[t._v("slice")]),t._v("为"),a("code",[t._v("nil")]),t._v("。对于"),a("code",[t._v("slice")]),t._v("、"),a("code",[t._v("map")]),t._v("和"),a("code",[t._v("channel")]),t._v("来说，"),a("code",[t._v("make")]),t._v("初始化了内部的数据结构，填充适当的值。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("make")]),t._v("返回初始化后的（非零）值。")])]),t._v(" "),a("p",[t._v("下面这个图详细的解释了"),a("code",[t._v("new")]),t._v("和"),a("code",[t._v("make")]),t._v("之间的区别。")]),t._v(" "),a("p",[a("img",{attrs:{src:"images/2.2.makenew.png?raw=true",alt:""}})]),t._v(" "),a("p",[t._v("图2.5 make和new对应底层的内存分配")]),t._v(" "),a("h2",{attrs:{id:"零值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#零值"}},[t._v("#")]),t._v(" 零值")]),t._v(" "),a("p",[t._v("关于“零值”，所指并非是空值，而是一种“变量未填充前”的默认值，通常为0。\n此处罗列 部分类型 的 “零值”")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int8")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//rune的实际类型是 int32")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// byte的实际类型是 uint8")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//长度为 4 byte")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//长度为 8 byte")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n\n")])])]),a("h2",{attrs:{id:"links"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#links"}},[t._v("#")]),t._v(" links")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/编程语言/Go/preface.html"}},[t._v("目录")])],1),t._v(" "),a("li",[t._v("上一章: "),a("RouterLink",{attrs:{to:"/编程语言/Go/02.1.html"}},[t._v("你好,Go")])],1),t._v(" "),a("li",[t._v("下一节: "),a("RouterLink",{attrs:{to:"/编程语言/Go/02.3.html"}},[t._v("流程和函数")])],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);