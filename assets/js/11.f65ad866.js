(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{312:function(n,t,o){"use strict";o.r(t);var r=o(13),e=Object(r.a)({},(function(){var n=this,t=n.$createElement,o=n._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[o("h1",{attrs:{id:"spring-boot"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot"}},[n._v("#")]),n._v(" Spring Boot")]),n._v(" "),o("ol",[o("li",[n._v("快速将第三方库与Spring生态集成，完成自动配置")]),n._v(" "),o("li",[n._v("可减少大量配置文件")]),n._v(" "),o("li",[n._v("内嵌web服务器(集成tomcat库实现)")]),n._v(" "),o("li",[n._v("可以jar包方式运行")])]),n._v(" "),o("h2",{attrs:{id:"springboot精髓"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#springboot精髓"}},[n._v("#")]),n._v(" SpringBoot精髓")]),n._v(" "),o("p",[n._v("核心自动装配源码在 spring-boot-autoconfigure 模块")]),n._v(" "),o("ul",[o("li",[n._v("提供完善的集成第三方库的  xxxx-Starter， 无需再手动集成\n"),o("ul",[o("li",[n._v("spring-boot-starter-jdbc： 集成数据库")]),n._v(" "),o("li",[n._v("spring-boot-starter-web：集成web容器")]),n._v(" "),o("li",[n._v("spring-boot-starter-amqp：集成消息队列")]),n._v(" "),o("li",[n._v("...")])])])]),n._v(" "),o("blockquote",[o("p",[n._v("原理：手动编写自动配置代码，关键注解接口配置文件，@Import，@ConditionalOnBean，@ComponentScan ,@ConditionalOnMissingBean, @ConfigurationProperties, ImportSelector ，spring.factories")])]),n._v(" "),o("h2",{attrs:{id:"springboot能集成web容器基础原理"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#springboot能集成web容器基础原理"}},[n._v("#")]),n._v(" SpringBoot能集成web容器基础原理")]),n._v(" "),o("p",[n._v("Spring MVC 3.0 之后支持注解启动，SpringBoot Web 通过扫描注解启动Spring MVC\norg.springframework.web.WebApplicationInitializer")]),n._v(" "),o("h2",{attrs:{id:"spring-boot-和-spring-cloud"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-和-spring-cloud"}},[n._v("#")]),n._v(" Spring Boot 和 Spring Cloud")]),n._v(" "),o("ol",[o("li",[n._v("一套完整的 "),o("code",[n._v("微服务框架")]),n._v(" （功能十分强大）。")]),n._v(" "),o("li",[n._v("注册中心")]),n._v(" "),o("li",[n._v("客户端调用工具")]),n._v(" "),o("li",[n._v("服务治理（负载均衡、断路由、分布式配置中心、网关、服务链路、消息总线等）")])]),n._v(" "),o("p",[n._v("微服务开发---RPC远程通讯技术、服务治理")]),n._v(" "),o("h2",{attrs:{id:"spring-boot-demo"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-demo"}},[n._v("#")]),n._v(" Spring Boot Demo")]),n._v(" "),o("ol",[o("li",[n._v("maven")])]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v('<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>cn.willon</groupId>\n    <artifactId>bootDemo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <name>bootDemo</name>\n\n    <description>test boot</description>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.3.RELEASE</version>\n        <relativePath/>\n    </parent>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n')])])]),o("ol",{attrs:{start:"2"}},[o("li",[n._v("第一个Controller")])]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v('import org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloController {\n\n    @RequestMapping("")\n    public String index() {\n        return "Hello World!";\n    }\n}\n')])])]),o("ol",{attrs:{start:"3"}},[o("li",[n._v("Main")])]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v("import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\n//APP入口\npublic class DemoApplication {\n    public static void main(String[] args) {\n\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n")])])]),o("ol",{attrs:{start:"4"}},[o("li",[n._v("此时访问 "),o("code",[n._v("http://localhost:8080")])])]),n._v(" "),o("h1",{attrs:{id:"注意事项"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[n._v("#")]),n._v(" 注意事项")]),n._v(" "),o("ol",[o("li",[o("p",[n._v("Application 只会扫描当前所在位置的包以及子包。不符合条件的包需要手动使用注解 "),o("code",[n._v("@ComonentScan")])])]),n._v(" "),o("li",[o("p",[n._v("在 "),o("code",[n._v("2.0")]),n._v(" 之后, "),o("code",[n._v("Actuator")]),n._v(" 对外web端暴露的信息 只有 "),o("code",[n._v("helth")]),n._v(" ,   "),o("code",[n._v("info")]),n._v(" , 如果向对外 暴露更多信息,需要修改配置文件")]),n._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[n._v('management:\n  endpoints:\n    web:\n      exposure:\n        include: "*"\n')])])]),o("p",[n._v("并且,接口的地址也发生改变,从原来的 "),o("code",[n._v("/")]),n._v("  变更为 "),o("code",[n._v("/actuator/")])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);