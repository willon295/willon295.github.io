(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{400:function(t,e,n){"use strict";n.r(e);var r=n(13),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"题目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目")]),t._v(" "),n("p",[t._v("风口之下，猪都能飞。当今中国股市牛市，真可谓“错过等七年”。 给你一个回顾历史的机会，已知一支股票连续n天的价格走势，以长度为n的整数数组表示，数组中第i个元素（prices[i]）代表该股票第i天的股价。 假设你一开始没有股票，但有至多两次买入1股而后卖出1股的机会，并且买入前一定要先保证手上没有股票。若两次交易机会都放弃，收益为0。 设计算法，计算你能获得的最大收益。 输入数值范围：2<=n<=100,0<=prices[i]<=100")]),t._v(" "),n("h2",{attrs:{id:"题目解释"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题目解释"}},[t._v("#")]),t._v(" 题目解释")]),t._v(" "),n("ol",[n("li",[t._v("给定一个数组比如 [3,8,5,1,7,8]，表示每天的股票价格")]),t._v(" "),n("li",[t._v("有且最多有两次买入售出的机会")]),t._v(" "),n("li",[t._v("买入之前手上不可持有股票")]),t._v(" "),n("li",[t._v("计算最大化收益")])]),t._v(" "),n("h2",{attrs:{id:"input"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#input"}},[t._v("#")]),t._v(" Input")]),t._v(" "),n("p",[t._v("给定一个数组比如 [3,8,5,1,7,8]，表示每天的股票价格")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("3,8,5,1,7,8\n")])])]),n("h2",{attrs:{id:"output"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#output"}},[t._v("#")]),t._v(" Output")]),t._v(" "),n("p",[t._v("计算最大化收益")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("12\n")])])]),n("h1",{attrs:{id:"coding"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#coding"}},[t._v("#")]),t._v(" Coding")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\npublic class GuShi {\n\n    /**\n     * 计算你能获得的最大收益\n     * @param prices Prices[i]即第i天的股价\n     * @return 整型 第二次卖出后的最大化收益\n     */\n    public static int calculateMax(int[] prices) {\n\n        //使用动态规划的思想，以收益为参考对象\n        //1. 第一次买入收益为负数\n        //2. 买入后收益 = 上次卖出收益 - 当前价格\n        //3. 卖出后的收益 = 上次买入时 收益 + 当前价格\n        int  firstBuy = Integer.MIN_VALUE;\n        int  firstSell = 0;\n        int  secondBuy= Integer.MIN_VALUE;\n        int  secondSell = 0;\n\n        for (int currentPrice : prices) {\n            //第一次买入 ，收益是 负数\n            firstBuy = Math.max(firstBuy,-currentPrice);\n            //第一次 卖出， 收益最大化，当前价格  -  第一次买入价格\n            firstSell = Math.max(firstSell,firstBuy+currentPrice);\n            //第二次 买入的收益   第一次的收益- 当前价格\n            secondBuy = Math.max(secondBuy,firstSell-currentPrice);\n            secondSell = Math.max(secondSell,secondBuy+currentPrice);\n        }\n        return secondSell;\n\n    }\n    \n}\n\n")])])]),n("h1",{attrs:{id:"利益最大化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#利益最大化"}},[t._v("#")]),t._v(" 利益最大化")]),t._v(" "),n("ol",[n("li",[t._v("将买卖 "),n("code",[t._v("两次")]),t._v(" 改成 "),n("code",[t._v("尽可能多")]),t._v(" 的买卖")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("    public int maxProfit(int[] prices) {\n        int sell = 0, prev_sell = 0, buy = Integer.MIN_VALUE, prev_buy;\n        for (int price : prices) {\n            \n            prev_buy = buy;\n            //当前买入的收益 = 上一次卖出收益 - 当前价格 ， 和 上一次买入收益 比较， 取最大值\n            buy = Math.max(prev_sell - price, prev_buy);\n\n            // 当前 卖出 收益 = 上一次买入收益+当前价格 ， 和  上一次卖出收益  比较，取最大值\n            prev_sell = sell;\n            sell = Math.max(prev_buy + price, prev_sell);\n        }\n        return sell;\n    }\n\n\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);