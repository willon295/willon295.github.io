(window.webpackJsonp=window.webpackJsonp||[]).push([[349],{374:function(a,e,s){"use strict";s.r(e);var n=s(13),_=Object(n.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("Python也是一门面向对象的语言")]),a._v(" "),s("h3",{attrs:{id:"类定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类定义"}},[a._v("#")]),a._v(" 类定义")]),a._v(" "),s("p",[a._v("用保留字"),s("code",[a._v("class")]),a._v(" 定义一个类。")]),a._v(" "),s("ul",[s("li",[a._v("属性： 属性可以在类中定义，也可以在实例中扩展。")]),a._v(" "),s("li",[a._v("方法：包括"),s("code",[a._v("内置的方法")]),a._v("和"),s("code",[a._v("用户定义的方法")]),a._v("，而且方法的第一个参数必须是"),s("code",[a._v("self")]),a._v("，当然亦可以改成其他的名字.")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("\t#举个栗子\n    class FClass:\n        #定义一个成员a\n        a=78\n\n        #定义一个方法setdata()\n        def setdata(self,value):\n            self.data=value\n\n        #定义一个方法display()\n        def display(self):\n            print(self.data)\n     \n")])])]),s("p",[a._v("还有世界上最简单的python类:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("class C:\n\tpass\n")])])]),s("h3",{attrs:{id:"类对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类对象"}},[a._v("#")]),a._v(" 类对象")]),a._v(" "),s("p",[a._v("类的对象是类的实例，类的实例可以调用类的方法，可以访问成员。"),s("code",[a._v("还可以创建一个新的属性并且赋值")]),a._v("。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('    #举个栗子\n\n    class FClass:\n        #定义一个成员a\n        a=78\n\n        #定义一个方法setdata()\n        def setdata(self,value):\n            self.data=value\n\n        #定义一个方法display()\n        def display(self):\n            print(self.data)\n\n    #实例化对象\n    aa=FClass()\n\n    #打印aa的a属性\n    print(aa.a)\n\n    #调用方法，进行赋值\n    aa.setdata("a data")\n    aa.display()\n\n    #创建一个新的属性，并且进行赋值\n    aa.another="another"\n    print(aa.another)\n     \n\n    #运行结果\n\n    78\n    a data\n    another\n')])])]),s("h3",{attrs:{id:"类方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类方法"}},[a._v("#")]),a._v(" 类方法")]),a._v(" "),s("p",[a._v("类的方法包括"),s("code",[a._v("内置的方法")]),a._v("和"),s("code",[a._v("用户定义的方法")]),a._v("，而且方法的第一个参数必须是"),s("code",[a._v("self")]),a._v("，当然亦可以改成其他的名字.")]),a._v(" "),s("h3",{attrs:{id:"继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[a._v("#")]),a._v(" 继承")]),a._v(" "),s("p",[a._v("类的继承：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("    class SubClass(BaseClass1,BaseClass2...)`\n")])])]),s("p",[a._v("举个栗子")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('     #这是一个基类\n    class BaseClass:\n        a=66\n        def f(self):\n            print("baseclass")\n\n    #继承基类\n    class SubClass(BaseClass):\n        b=33\n        def f2(self):\n            print("subclass")\n')])])]),s("p",[a._v("那么，"),s("code",[a._v("Subclass")]),a._v("的 "),s("code",[a._v("实例")]),a._v("会有所有父类属性和方法。并且方法是可以重写。")]),a._v(" "),s("h3",{attrs:{id:"访问权限"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问权限"}},[a._v("#")]),a._v(" 访问权限")]),a._v(" "),s("ol",[s("li",[s("p",[s("code",[a._v("私有成员")]),a._v("： "),s("code",[a._v("__private_attrs")]),a._v(":\n两个下划线开头，声明该属性为私有，不能在类地外部被使用或直接访问。在类内部的方法中使用时 "),s("code",[a._v("self.__private_attrs")]),a._v("。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("私有方法")]),a._v("："),s("code",[a._v("__private_method()")]),a._v(":"),s("br"),a._v("\n两个下划线开头，声明该方法为私有方法，不能在类地外部调用。在类的内部调用。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('    #举个栗子\n    class ClassOne:\n        #定义一个共有成员\n        aa="public aa"\n\n        #定义一个私有成员\n        __bb="private bb"\n\n        #定义一个共有方法\n        def func(self):\n            print("public method")\n\n        #定义一个私有方法\n        def __func(self):\n            print("private method")\n\n    #实例化\n    demo=ClassOne()\n\n    #访问\n    print(demo.aa)\n    demo.func()\n    #上面的会正常运行，下面的两个会报错\n\n    print(demo.__bb)\n    demo.__func()\n\n    #运行结果\n\n    public aa\n    public method\n    #报错\n    Traceback (most recent call last):\n    File "E:\\桌面内容\\Python笔记\\test.py", line 25, in &lt;module&gt;\n    print(demo.__bb)\n    AttributeError: \'ClassOne\' object has no attribute \'__bb\'\n')])])])])]),a._v(" "),s("p",[a._v("###　类的专有方法")]),a._v(" "),s("ol",[s("li",[s("code",[a._v("__init__")]),a._v(" : 构造函数，在生成对象时调用")]),a._v(" "),s("li",[s("code",[a._v("__del__")]),a._v(" : 析构函数，释放对象时使用")]),a._v(" "),s("li",[s("code",[a._v("__repr__")]),a._v(" : 打印，转换")]),a._v(" "),s("li",[s("code",[a._v("__setitem__")]),a._v(": 按照索引赋值")]),a._v(" "),s("li",[s("code",[a._v("__getitem__")]),a._v(": 按照索引获取值")]),a._v(" "),s("li",[s("code",[a._v("__len__")]),a._v(": 获得长度")]),a._v(" "),s("li",[s("code",[a._v("__cmp__")]),a._v(": 比较运算")]),a._v(" "),s("li",[s("code",[a._v("__call__")]),a._v(": 函数调用")]),a._v(" "),s("li",[s("code",[a._v("__name__")]),a._v(":类的名字")])])])}),[],!1,null,null,null);e.default=_.exports}}]);