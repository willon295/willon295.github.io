(window.webpackJsonp=window.webpackJsonp||[]).push([[356],{353:function(a,t,e){"use strict";e.r(t);var n=e(13),s=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"方法的定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法的定义"}},[a._v("#")]),a._v(" 方法的定义")]),a._v(" "),e("p",[a._v("基本的定义是：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("def func_name(param:Type, param2:Type2 ...): RETURN_TYPE\n{\n\tstatement\n\treturn xxx\n}\n")])])]),e("h2",{attrs:{id:"方法定义注意点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法定义注意点"}},[a._v("#")]),a._v(" 方法定义注意点")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("def addInt(a: Int, b: Int,c:Int): Int = {\n     a + b + c\n}\n")])])]),e("p",[e("strong",[a._v("注意")]),a._v("：")]),a._v(" "),e("ol",[e("li",[a._v("传入的参数必须指定数据类型")]),a._v(" "),e("li",[a._v("用 "),e("code",[a._v("Unit")]),a._v(" 表示无返回，相当于java的 "),e("code",[a._v("void")])]),a._v(" "),e("li",[e("code",[a._v("return")]),a._v(" 可以省略")]),a._v(" "),e("li",[a._v("参数可以 "),e("code",[a._v("不按照传参顺序")]),a._v(" 传入，可以手动指定参数名")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("addInt(b=7,a=12,c=3)\n")])])]),e("h2",{attrs:{id:"可变参数方法定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可变参数方法定义"}},[a._v("#")]),a._v(" 可变参数方法定义")]),a._v(" "),e("p",[a._v("Scala 通过在参数的类型之后放一个 "),e("code",[a._v("星号（*）")]),a._v(" 来设置可变参数(可重复的参数)。例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('def  printStrings(args:String*): Unit ={\n    for(arg <- args){\n      println(arg)\n    }\n}\nprintStrings("aaa","bbb","ccc")\n')])])]),e("h1",{attrs:{id:"函数的定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数的定义"}},[a._v("#")]),a._v(" 函数的定义")]),a._v(" "),e("p",[a._v("函数和方法不同，函数可以是一个变量/实例，函数可以作为参数传入方法内，函数的定义有几种")]),a._v(" "),e("ol",[e("li",[a._v("简单明了的定义")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//注意  =  左边的是函数名及参数的定义，右边是函数体\nval f1 = (x: Int , y: Int ) => x+y \n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("完整的定义")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// f2 是函数，返回值类型是Double\nval f2: Int => Double = (a: Int) => Math.pow(a, 4)\n// 注解: 传入两个 Int 类型数据，返回值为Double类型\nval f2: (Int, Int) => Double =  { (x,y) => (x+y).toDouble}\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[a._v("new 实例定义")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// Function2代表传入两个参数的方法，\n// [Int,Int,.....,Double] 最后一个代表返回类型，前面的代表传入的参数类型\n  val  f3 = new Function2[Int,Int ,Double] {\n    override def apply(v1: Int, v2: Int): Double = (v1+v2).toDouble\n  }\n")])])]),e("h1",{attrs:{id:"方法和函数的说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法和函数的说明"}},[a._v("#")]),a._v(" 方法和函数的说明")]),a._v(" "),e("p",[a._v("方法和函数的几个特点")]),a._v(" "),e("ol",[e("li",[a._v("方法可以转换为函数")]),a._v(" "),e("li",[a._v("函数可以作为参数传入方法")]),a._v(" "),e("li",[a._v("方法也可以作为参数传入方法，但是实际上方法会先会转换成函数")]),a._v(" "),e("li",[a._v("方法转函数")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('//定义一个方法\ndef addInt(a: Int, b: Int,c:Int): Int = {\n     a + b + c\n}\n//方法转函数,跟一个下划线 "_"\n\nval f = addInt _\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);