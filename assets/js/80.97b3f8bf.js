(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{408:function(n,t,r){"use strict";r.r(t);var i=r(13),a=Object(i.a)({},(function(){var n=this,t=n.$createElement,r=n._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("h1",{attrs:{id:"题目"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[n._v("#")]),n._v(" 题目")]),n._v(" "),r("p",[n._v("P为给定的二维平面整数点集。定义 P 中某点x，如果x满足 P 中任意点都不在 x 的右上方区域内（横纵坐标都大于x），则称其为“最大的”。求出所有“最大的”点的集合。（所有点的横坐标和纵坐标都不重复, 坐标轴范围在[0, 1e9) 内）\n如下图：实心点为满足条件的点的集合。请实现代码找到集合 P 中的所有 ”最大“ 点的集合并输出。来源："),r("a",{attrs:{href:"https://www.nowcoder.com/questionTerminal/e35d8c3404194cd69a88da1667ef8081",target:"_blank",rel:"noopener noreferrer"}},[n._v("牛客网"),r("OutboundLink")],1)]),n._v(" "),r("p",[r("img",{attrs:{src:"/images/programming_10.png",alt:"programming_10"}})]),n._v(" "),r("h1",{attrs:{id:"代码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[n._v("#")]),n._v(" 代码")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n\n    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Pair[] ps = new Pair[n];\n        for (int i = 0; i < n; i++) {\n            int x = sc.nextInt();\n            int y = sc.nextInt();\n            ps[i] = new Pair(x, y);\n        }\n\n        Arrays.sort(ps);\n        ArrayList<Pair> res = new ArrayList<>();\n\n        //将 最右下的点 的  y 作为参考\n        int MAXY = ps[n - 1].y;\n        res.add(ps[n - 1]);\n\n        //倒序遍历\n        for (int i = ps.length - 2; i >= 0; i--) {\n            if (ps[i].y > MAXY) {\n                res.add(ps[i]);\n            }\n            MAXY = Math.max(MAXY, ps[i].y);\n        }\n\n\n        for (int i = res.size() - 1; i >= 0; i--) {\n            System.out.println(res.get(i));\n        }\n\n    }\n\n}\n\nclass Pair implements Comparable<Pair> {\n    int x;\n    int y;\n\n    public Pair(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    @Override\n    public int compareTo(Pair o) {\n        return x == o.x ? o.y - y : x - o.x; // X 降序  , Y 升序\n    }\n\n    @Override\n    public String toString() {\n        return x + " " + y;\n    }\n}\n\n')])])])])}),[],!1,null,null,null);t.default=a.exports}}]);