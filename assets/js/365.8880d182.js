(window.webpackJsonp=window.webpackJsonp||[]).push([[365],{326:function(t,n,a){"use strict";a.r(n);var e=a(13),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"柯里化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#柯里化"}},[t._v("#")]),t._v(" 柯里化")]),t._v(" "),a("p",[t._v("柯里化（Currying）是把接受 "),a("code",[t._v("多个参数")]),t._v(" 的函数变换成 "),a("code",[t._v("接受一个单一参数")]),t._v(" (最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。")]),t._v(" "),a("h2",{attrs:{id:"scala-柯里化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scala-柯里化"}},[t._v("#")]),t._v(" Scala 柯里化")]),t._v(" "),a("p",[t._v("在scala中柯里化可以将 "),a("code",[t._v("多参数函数")]),t._v(" 变换成 "),a("code",[t._v("接受单一参数函数")])]),t._v(" "),a("h2",{attrs:{id:"多参数-单一参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多参数-单一参数"}},[t._v("#")]),t._v(" 多参数->单一参数")]),t._v(" "),a("ol",[a("li",[t._v("方法不可以直接柯里化，应该先转化成 函数")]),t._v(" "),a("li",[t._v("函数可以柯里化")]),t._v(" "),a("li",[t._v("举个例子")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("def mutiply(x: Int, y: Int): Int = x * y\n\n//将方法转化成 函数\nval f: (Int, Int) => Int = mutiply _\n\n//函数柯里化\nval curried: Int => Int => Int = f.curried\n\n\n\n//方法和函数的调用\nmutiply(2,3)\nf(2,3)\n\n//柯里化之后的函数调用\ncurried(2)(3)\n")])])]),a("h2",{attrs:{id:"单一参数-多参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单一参数-多参数"}},[t._v("#")]),t._v(" 单一参数 => 多参数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("def customFilter(f: Int => Boolean)(xs: List[Int]) ={x.filter(f)}\ndef onlyEven(x: Int) = x % 2 == 0\nval lst1 = List(12, 11, 5, 20, 3, 13, 2)\n\n//对传入的数字进行过滤\ncustomFilter(onlyEven)(lst1) \n\n//转化\nval onlyEvenFilter = customFilter(onlyEven) _\nonlyEvenFilter(lst)\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);