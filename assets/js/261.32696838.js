(window.webpackJsonp=window.webpackJsonp||[]).push([[261],{589:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_3-3-go如何使得web工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-go如何使得web工作"}},[t._v("#")]),t._v(" 3.3 Go如何使得Web工作")]),t._v(" "),a("p",[t._v("前面小节介绍了如何通过Go搭建一个Web服务，我们可以看到简单应用一个net/http包就方便的搭建起来了。那么Go在底层到底是怎么做的呢？万变不离其宗，Go的Web服务工作也离不开我们第一小节介绍的Web工作方式。")]),t._v(" "),a("h2",{attrs:{id:"web工作方式的几个概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web工作方式的几个概念"}},[t._v("#")]),t._v(" web工作方式的几个概念")]),t._v(" "),a("p",[t._v("以下均是服务器端的几个概念")]),t._v(" "),a("p",[t._v("Request：用户请求的信息，用来解析用户的请求信息，包括post、get、cookie、url等信息")]),t._v(" "),a("p",[t._v("Response：服务器需要反馈给客户端的信息")]),t._v(" "),a("p",[t._v("Conn：用户的每次请求链接")]),t._v(" "),a("p",[t._v("Handler：处理请求和生成返回信息的处理逻辑")]),t._v(" "),a("h2",{attrs:{id:"分析http包运行机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分析http包运行机制"}},[t._v("#")]),t._v(" 分析http包运行机制")]),t._v(" "),a("p",[t._v("下图是Go实现Web服务的工作模式的流程图")]),t._v(" "),a("p",[a("img",{attrs:{src:"images/3.3.http.png?raw=true",alt:""}})]),t._v(" "),a("p",[t._v("图3.9 http包执行流程")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("创建Listen Socket, 监听指定的端口, 等待客户端请求到来。")])]),t._v(" "),a("li",[a("p",[t._v("Listen Socket接受客户端的请求, 得到Client Socket, 接下来通过Client Socket与客户端通信。")])]),t._v(" "),a("li",[a("p",[t._v("处理客户端的请求, 首先从Client Socket读取HTTP请求的协议头, 如果是POST方法, 还可能要读取客户端提交的数据, 然后交给相应的handler处理请求, handler处理完毕准备好客户端需要的数据, 通过Client Socket写给客户端。")])])]),t._v(" "),a("p",[t._v("这整个的过程里面我们只要了解清楚下面三个问题，也就知道Go是如何让Web运行起来了")]),t._v(" "),a("ul",[a("li",[t._v("如何监听端口？")]),t._v(" "),a("li",[t._v("如何接收客户端请求？")]),t._v(" "),a("li",[t._v("如何分配handler？")])]),t._v(" "),a("p",[t._v("前面小节的代码里面我们可以看到，Go是通过一个函数"),a("code",[t._v("ListenAndServe")]),t._v("来处理这些事情的，这个底层其实这样处理的：初始化一个server对象，然后调用了"),a("code",[t._v('net.Listen("tcp", addr)')]),t._v("，也就是底层用TCP协议搭建了一个服务，然后监控我们设置的端口。")]),t._v(" "),a("p",[t._v("下面代码来自Go的http包的源码，通过下面的代码我们可以看到整个的http处理过程：")]),t._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("srv "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Serve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l net"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Listener"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defer")]),t._v(" l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tempDelay time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Duration "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// how long to sleep on accept failure")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\trw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Accept")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" ne"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ok "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("net"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ok "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ne"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Temporary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" tempDelay "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t\ttempDelay "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Millisecond\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t\ttempDelay "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" max "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" tempDelay "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" max "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t\ttempDelay "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" max\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t\tlog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http: Accept error: %v; retrying in %v"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tempDelay"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t\ttime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tempDelay"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" e\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\ttempDelay "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\t\tc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" srv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newConn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("serve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("监控之后如何接收客户端的请求呢？上面代码执行监控端口之后，调用了"),a("code",[t._v("srv.Serve(net.Listener)")]),t._v("函数，这个函数就是处理接收客户端的请求信息。这个函数里面起了一个"),a("code",[t._v("for{}")]),t._v("，首先通过Listener接收请求，其次创建一个Conn，最后单独开了一个goroutine，把这个请求的数据当做参数扔给这个conn去服务："),a("code",[t._v("go c.serve()")]),t._v("。这个就是高并发体现了，用户的每一次请求都是在一个新的goroutine去服务，相互不影响。")]),t._v(" "),a("p",[t._v("那么如何具体分配到相应的函数来处理请求呢？conn首先会解析request:"),a("code",[t._v("c.readRequest()")]),t._v(",然后获取相应的handler:"),a("code",[t._v("handler := c.server.Handler")]),t._v("，也就是我们刚才在调用函数"),a("code",[t._v("ListenAndServe")]),t._v("时候的第二个参数，我们前面例子传递的是nil，也就是为空，那么默认获取"),a("code",[t._v("handler = DefaultServeMux")]),t._v(",那么这个变量用来做什么的呢？对，这个变量就是一个路由器，它用来匹配url跳转到其相应的handle函数，那么这个我们有设置过吗?有，我们调用的代码里面第一句不是调用了"),a("code",[t._v('http.HandleFunc("/", sayhelloName)')]),t._v("嘛。这个作用就是注册了请求"),a("code",[t._v("/")]),t._v('的路由规则，当请求uri为"/"，路由就会转到函数sayhelloName，DefaultServeMux会调用ServeHTTP方法，这个方法内部其实就是调用sayhelloName本身，最后通过写入response的信息反馈到客户端。')]),t._v(" "),a("p",[t._v("详细的整个流程如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"images/3.3.illustrator.png?raw=true",alt:""}})]),t._v(" "),a("p",[t._v("图3.10 一个http连接处理流程")]),t._v(" "),a("p",[t._v("至此我们的三个问题已经全部得到了解答，你现在对于Go如何让Web跑起来的是否已经基本了解了呢？")]),t._v(" "),a("h2",{attrs:{id:"links"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#links"}},[t._v("#")]),t._v(" links")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/编程语言/Go/preface.html"}},[t._v("目录")])],1),t._v(" "),a("li",[t._v("上一节: "),a("RouterLink",{attrs:{to:"/编程语言/Go/03.2.html"}},[t._v("GO搭建一个简单的web服务")])],1),t._v(" "),a("li",[t._v("下一节: "),a("RouterLink",{attrs:{to:"/编程语言/Go/03.4.html"}},[t._v("Go的http包详解")])],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);