(window.webpackJsonp=window.webpackJsonp||[]).push([[355],{356:function(a,t,s){"use strict";s.r(t);var e=s(13),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"for循环的基本用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for循环的基本用法"}},[a._v("#")]),a._v(" for循环的基本用法")]),a._v(" "),s("p",[a._v("注意： "),s("code",[a._v("<-")]),a._v(" 箭头表示赋值 ！")]),a._v(" "),s("h2",{attrs:{id:"to"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#to"}},[a._v("#")]),a._v(" to")]),a._v(" "),s("p",[s("code",[a._v("a to b")]),a._v(" 用来表示范围,从a到b")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("for (a <- 1 to 10 ){//表示 1--10包括10\n\tprint(a)\n}\n//结果12345678910\n")])])]),s("h2",{attrs:{id:"util"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#util"}},[a._v("#")]),a._v(" util")]),a._v(" "),s("p",[s("code",[a._v("a util b")]),a._v(": 表示从 a 到 b,不包含 b")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("for (a <- 1 to 10 ){//表示 1--10不包括10\n\tprint(a)\n}\n//结果123456789\n")])])]),s("h2",{attrs:{id:"多区间-多维遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多区间-多维遍历"}},[a._v("#")]),a._v(" 多区间/多维遍历")]),a._v(" "),s("p",[a._v("可以通过分号“;” 隔开遍历的条件")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('for( a <- 1 to 3; b <- 1 to 3){\n\tprintln(a+"---"+b )\n}\n//结果\n//1---2\n//2---1\n//2---2\n//3---1\n//3---2\n')])])]),s("h2",{attrs:{id:"遍历集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历集合"}},[a._v("#")]),a._v(" 遍历集合")]),a._v(" "),s("ol",[s("li",[a._v("语法")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("for( var x <- List ){\n   statement(s);\n}\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[a._v("举个离子")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("var nums = List(1,2,33,555,6)\nfor (a <- nums){\n\tprint(a)\n}\n")])])]),s("h2",{attrs:{id:"循环过滤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环过滤"}},[a._v("#")]),a._v(" 循环过滤")]),a._v(" "),s("p",[a._v("遍历的过程中可以过滤")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("//多个过滤条件用分号; 隔开\nfor (a <- numlist if a < 5; if a > 3) {\n      println(a)\n}\n")])])]),s("h2",{attrs:{id:"yield返回结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yield返回结果"}},[a._v("#")]),a._v(" yield返回结果")]),a._v(" "),s("p",[s("code",[a._v("yield")]),a._v(" 跟在for语句结束处，直接返回结果，注意此时用的是 "),s("code",[a._v("{}")]),a._v(" 包含遍历条件")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("//基本语法\n//for () yield {}\nvar newList = for (a <- numlist if a >= 1; if a < 5) yield a\n\n//如果迭代器由两个集合，返回类型取决于第一个\nfor (a <- seq ; b <- 1 to 10) yield {a+b}\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);