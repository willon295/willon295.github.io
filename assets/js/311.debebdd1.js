(window.webpackJsonp=window.webpackJsonp||[]).push([[311],{463:function(t,a,r){"use strict";r.r(a);var s=r(13),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"_11-错误处理-调试和测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11-错误处理-调试和测试"}},[t._v("#")]),t._v(" 11 错误处理，调试和测试")]),t._v(" "),r("p",[t._v('我们经常会看到很多程序员大部分的"编程"时间都花费在检查bug和修复bug上。无论你是在编写修改代码还是重构系统，几乎都是花费大量的时间在进行故障排除和测试，外界都觉得我们程序员是设计师，能够把一个系统从无做到有，是一项很伟大的工作，而且是相当有趣的工作，但事实上我们每天都是徘徊在排错、调试、测试之间。当然如果你有良好的习惯和技术方案来直面这些问题，那么你就有可能将排错时间减到最少，而尽可能的将时间花费在更有价值的事情上。')]),t._v(" "),r("p",[t._v("但是遗憾的是很多程序员不愿意在错误处理、调试和测试能力上下工夫，导致后面应用上线之后查找错误、定位问题花费更多的时间。所以我们在设计应用之前就做好错误处理规划、测试用例等，那么将来修改代码、升级系统都将变得简单。")]),t._v(" "),r("p",[t._v("开发Web应用过程中，错误自然难免，那么如何更好的找到错误原因，解决问题呢？11.1小节将介绍Go语言中如何处理错误，如何设计自己的包、函数的错误处理，11.2小节将介绍如何使用GDB来调试我们的程序，动态运行情况下各种变量信息，运行情况的监控和调试。")]),t._v(" "),r("p",[t._v("11.3小节将对Go语言中的单元测试进行深入的探讨，并示例如何来编写单元测试，Go的单元测试规则规范如何定义，以保证以后升级修改运行相应的测试代码就可以进行最小化的测试。")]),t._v(" "),r("p",[t._v("长期以来，培养良好的调试、测试习惯一直是很多程序员逃避的事情，所以现在你不要再逃避了，就从你现在的项目开发，从学习Go Web开发开始养成良好的习惯。")]),t._v(" "),r("h2",{attrs:{id:"目录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),r("p",[r("img",{attrs:{src:"images/navi11.png?raw=true",alt:""}})]),t._v(" "),r("h2",{attrs:{id:"links"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#links"}},[t._v("#")]),t._v(" links")]),t._v(" "),r("ul",[r("li",[r("RouterLink",{attrs:{to:"/编程语言/Go/preface.html"}},[t._v("目录")])],1),t._v(" "),r("li",[t._v("上一章: "),r("RouterLink",{attrs:{to:"/编程语言/Go/10.4.html"}},[t._v("第十章总结")])],1),t._v(" "),r("li",[t._v("下一节: "),r("RouterLink",{attrs:{to:"/编程语言/Go/11.1.html"}},[t._v("错误处理")])],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);