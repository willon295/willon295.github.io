(window.webpackJsonp=window.webpackJsonp||[]).push([[235],{628:function(v,_,t){"use strict";t.r(_);var a=t(13),e=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("p",[v._v("Java一种 "),t("code",[v._v("8 种")]),v._v(" 基本数据类型,  8 种又根据自身表示的类型不同， 分为以下 4 类：")]),v._v(" "),t("ul",[t("li",[v._v("整型 (4个)： "),t("strong",[v._v("byte , short ,  int , long")])]),v._v(" "),t("li",[v._v("浮点型 (2个):  "),t("strong",[v._v("float ,  double")])]),v._v(" "),t("li",[v._v("布尔型 (1个):  "),t("strong",[v._v("boolean")])]),v._v(" "),t("li",[v._v("字符型 (1个):  "),t("strong",[v._v("char")])])]),v._v(" "),t("h2",{attrs:{id:"整型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整型"}},[v._v("#")]),v._v(" 整型")]),v._v(" "),t("p",[v._v("整型之所以被称之为整型， 个人理解是：  整数的数据类型。 那么在Java中，整型的各种数据类型能表示的 "),t("code",[v._v("范围")]),v._v(" 是不同的，"),t("code",[v._v("占用空间")]),v._v(" 也是不同的（存储在计算机中，读取到内存中占用的空间）")]),v._v(" "),t("h3",{attrs:{id:"byte"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#byte"}},[v._v("#")]),v._v(" byte")]),v._v(" "),t("p",[v._v("我们称之为 "),t("code",[v._v("字节")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("默认值 0")])]),v._v(" "),t("li",[t("p",[v._v("1 个字节占用空间 "),t("code",[v._v("8")]),v._v(" 位")])]),v._v(" "),t("li",[t("p",[v._v("有符号以二进制 "),t("code",[v._v("补码")]),v._v(" 存储")])]),v._v(" "),t("li",[t("p",[v._v("表示范围：  "),t("code",[v._v("-2^7")]),v._v(" 至 "),t("code",[v._v("2^7 - 1")]),v._v(" ， 即："),t("code",[v._v("-128")]),v._v("  至 "),t("code",[v._v("127")])])])]),v._v(" "),t("p",[v._v("那么问题来了， 不是说好占用 8 位， 不应该是 "),t("code",[v._v("2^7+2^6+2^5+...1 =256")]),v._v(" 么 ？其实简单思考一下： 既然要表示 "),t("code",[v._v("负数")]),v._v(" ， 那么自然就有1位 "),t("code",[v._v("符号位")]),v._v("， 自然就无法表示到256。 其他数据类型同理。")]),v._v(" "),t("h3",{attrs:{id:"short"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#short"}},[v._v("#")]),v._v(" short")]),v._v(" "),t("ul",[t("li",[v._v("默认值0")]),v._v(" "),t("li",[v._v("1个short占用 "),t("code",[v._v("16")]),v._v(" 位")]),v._v(" "),t("li",[v._v("有符号以二进制 "),t("code",[v._v("补码")]),v._v(" 存储")]),v._v(" "),t("li",[v._v("表示范围：  "),t("code",[v._v("-2^15")]),v._v("  至 "),t("code",[v._v("2^15 - 1")]),v._v(" ， 即："),t("code",[v._v("-32768")]),v._v("  至 "),t("code",[v._v("32767")]),v._v(" ，")])]),v._v(" "),t("h3",{attrs:{id:"int"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#int"}},[v._v("#")]),v._v(" int")]),v._v(" "),t("ul",[t("li",[v._v("默认值0")]),v._v(" "),t("li",[v._v("1个int占用 "),t("code",[v._v("32")]),v._v(" 位")]),v._v(" "),t("li",[v._v("有符号以二进制 "),t("code",[v._v("补码")]),v._v(" 存储")]),v._v(" "),t("li",[v._v("表示范围：  "),t("code",[v._v("-2^31")]),v._v("  至 "),t("code",[v._v("2^31 - 1")]),v._v(" ， 即："),t("code",[v._v("-2147483648")]),v._v("  至 "),t("code",[v._v("2147483647")]),v._v("  ==>  正负21亿")])]),v._v(" "),t("h3",{attrs:{id:"long"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#long"}},[v._v("#")]),v._v(" long")]),v._v(" "),t("ul",[t("li",[v._v("默认值 "),t("code",[v._v("0L")])]),v._v(" "),t("li",[v._v("1个long占用 "),t("code",[v._v("64")]),v._v(" 位")]),v._v(" "),t("li",[v._v("有符号以二进制 "),t("code",[v._v("补码")]),v._v(" 存储")]),v._v(" "),t("li",[v._v("表示范围：  "),t("code",[v._v("-2^63")]),v._v("  至 "),t("code",[v._v("2^63 - 1")]),v._v(" ， 即："),t("code",[v._v("-9,223,372,036,854,775,808")]),v._v("  至 "),t("code",[v._v("9,223,372,036,854,775,807")])])]),v._v(" "),t("h2",{attrs:{id:"浮点型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浮点型"}},[v._v("#")]),v._v(" 浮点型")]),v._v(" "),t("h3",{attrs:{id:"float"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#float"}},[v._v("#")]),v._v(" float")]),v._v(" "),t("ul",[t("li",[v._v("默认值 "),t("code",[v._v("0.0f")]),v._v(" 单精度浮点数")]),v._v(" "),t("li",[v._v("1个float占用 "),t("code",[v._v("32")]),v._v(" 位")]),v._v(" "),t("li",[v._v("不应该用于表示精确数值，如金额")])]),v._v(" "),t("h3",{attrs:{id:"double"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#double"}},[v._v("#")]),v._v(" double")]),v._v(" "),t("ul",[t("li",[v._v("默认值 "),t("code",[v._v("0.0d")]),v._v(" ， 双精度浮点数")]),v._v(" "),t("li",[v._v("1个double占用 "),t("code",[v._v("64")]),v._v(" 位")]),v._v(" "),t("li",[v._v("可以用于表示精确值，如金额")])]),v._v(" "),t("h2",{attrs:{id:"字符型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符型"}},[v._v("#")]),v._v(" 字符型")]),v._v(" "),t("h3",{attrs:{id:"char"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#char"}},[v._v("#")]),v._v(" char")]),v._v(" "),t("ul",[t("li",[v._v("占用 "),t("code",[v._v("16")]),v._v(" 位")]),v._v(" "),t("li",[v._v("范围： "),t("code",[v._v("0")]),v._v(" ～ "),t("code",[v._v("65535")]),v._v("  ， "),t("code",[v._v("\\u0000")]),v._v("  ~ "),t("code",[v._v("\\uffff")])]),v._v(" "),t("li",[v._v("可以存储任何字符， 包括中文字符")])]),v._v(" "),t("h2",{attrs:{id:"布尔型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#布尔型"}},[v._v("#")]),v._v(" 布尔型")]),v._v(" "),t("h3",{attrs:{id:"boolean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#boolean"}},[v._v("#")]),v._v(" boolean")]),v._v(" "),t("ul",[t("li",[v._v("默认值 "),t("code",[v._v("false")])]),v._v(" "),t("li",[v._v("取值只有 "),t("code",[v._v("true")]),v._v(" 和 "),t("code",[v._v("false")])]),v._v(" "),t("li",[v._v("占用空间不定")])])])}),[],!1,null,null,null);_.default=e.exports}}]);