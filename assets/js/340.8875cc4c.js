(window.webpackJsonp=window.webpackJsonp||[]).push([[340],{401:function(n,t,a){"use strict";a.r(t);var e=a(13),_=Object(e.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h3",{attrs:{id:"print-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#print-语句"}},[n._v("#")]),n._v(" print 语句")]),n._v(" "),a("p",[a("code",[n._v("print")]),n._v("  用于输出，可以普通数据或者计算结果。字符串可以用 "),a("code",[n._v(",")]),n._v(" 连接.")]),n._v(" "),a("blockquote",[a("p",[n._v("注意：在 "),a("code",[n._v("Python3")]),n._v("中 "),a("code",[n._v("print()")]),n._v(" 才能正常使用")])]),n._v(" "),a("p",[n._v("举个栗子")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('print("Hello" , "World")\n#逗号连接会用  空格隔开\nprint("Hello"+"World")\n#加号连接则是 直接拼接\nprint(100+200)\nprint(100 ==200)\n\n#运行结果\nHello World\nHelloWorld\n300\nFalse\n')])])]),a("h3",{attrs:{id:"转义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转义"}},[n._v("#")]),n._v(" 转义")]),n._v(" "),a("ol",[a("li",[a("p",[n._v("如果输出的语句中有  "),a("code",[n._v('""')]),n._v("  或者 "),a("code",[n._v("''")]),n._v("可以使用转义符 "),a("code",[n._v("\\")]),n._v("\n举个栗子")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('print(" I\\\'m  fine")\nprint("\\"I\\\'m fine\\"")\n#运行结果\nI\'m  fine \n"I\'m fine"\n')])])])]),n._v(" "),a("li",[a("p",[n._v("字符前加 "),a("code",[n._v("r")]),n._v(" 就可以自动完整输出内容，不需要转义符。但是：")]),n._v(" "),a("p",[n._v("举个栗子")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('#相同的符号不能一起出现\nprint(r\'\\(0_0)/\')\nprint(r\'"\\(0_0)/"\')\nprint("-----------")\nprint(r"\\(0_0)/")\nprint(r"\'\\(0_0)/\'")\n# print(r\'\'\\(0_0)\'\') 会报错\n# print(r""\\(0_0)/"") 会报错\n\n#运行结果\n\\(0_0)/\n"\\(0_0)/"\n\\(0_0)/\n\'\\(0_0)/\'\n')])])])]),n._v(" "),a("li",[a("p",[a("code",[n._v("r'''内容'''")]),n._v(" ,这个则可以直接忽视上上面的不足 "),a("code",[n._v("内容")]),n._v(" 的东西会直接完整的输出,但是"),a("code",[n._v("\\n")]),n._v("作为换行符会被转义。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("print(r''' 这是个表情：\\(0_0)/ 。\\n嗯 \"I'm  OK\"  ''')\n\n#输出结果\n\n#这是个表情：\\(0_0)/ 。\n#嗯 \"I'm  OK\"\n")])])])])]),n._v(" "),a("h3",{attrs:{id:"变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[n._v("#")]),n._v(" 变量")]),n._v(" "),a("p",[n._v("变量名必须是大小写英文、数字和下划线（_）的组合，且不能用数字开头。如：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\ta = 100\n    t_001 = "Python"\n')])])]),a("p",[n._v("Python 是动态语言，数据类型会自动进行转换")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\ta = 123 \n    # a是整数\n    print a\n    a = 'Python'   \n    # a变为字符串\n    print (a)\n\n    #运行结果\n\n    123\n    Python\n")])])]),a("p",[n._v("当然Python中变量也可以赋值")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('    a = 123\n    b = a \n    print (a)\n    print (b)\n    #改变 a 的值\n    a = "Hello"\n    print (a)\n    print (b)\n\n    #运行结果\n\n    123\n    123\n    Hello\n    123\n')])])]),a("blockquote",[a("p",[n._v("内存变化过程：")]),n._v(" "),a("ol",[a("li",[n._v("新建一个 "),a("code",[n._v("123")]),n._v(" 的整数")]),n._v(" "),a("li",[n._v("新建一个变量 "),a("code",[n._v("a")]),n._v(" ,将它指向 "),a("code",[n._v("123")])]),n._v(" "),a("li",[n._v("新建一个变量 "),a("code",[n._v("b")]),n._v(" ，将它指向 "),a("code",[n._v("a")]),n._v(" 指向 "),a("code",[n._v("123")])]),n._v(" "),a("li",[n._v("创建字符 "),a("code",[n._v("Hello")]),n._v(" ，将 "),a("code",[n._v("a")]),n._v(" 指向 "),a("code",[n._v("Hello")])])])]),n._v(" "),a("p",[n._v("过程中 "),a("code",[n._v("b")]),n._v(" 的值并没有因为 "),a("code",[n._v("a")]),n._v(" 的改变而改变 ，可以通过 "),a("code",[n._v("id")]),n._v(" 验证")]),n._v(" "),a("p",[n._v("举个栗子")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    a = '123'\n    b = a\n    c = '123'\n    print(id(a))\n    print(id(b))\n    print (id(c))\n\n\t#运行结果\n\n    55852000\n    55852000\n    55852000\n")])])]),a("h3",{attrs:{id:"变量作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量作用域"}},[n._v("#")]),n._v(" 变量作用域")]),n._v(" "),a("ul",[a("li",[n._v("全局变量：可用关键字"),a("code",[n._v("global")]),n._v(" 修饰，全局可用")]),n._v(" "),a("li",[n._v("局部变量：仅仅函数里可用")])]),n._v(" "),a("p",[n._v("举个栗子")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    #定义全局变量 x\n    x = '123'\n    def fun():\n        #定义局部变量 x\n        x = '456'\n        print(x)\n    fun()\n    print(x)\n   \n\n    #运行结果\n\t456\n    123\n")])])]),a("blockquote",[a("p",[n._v("解释： 两个"),a("code",[n._v("x")]),n._v(" 在内存中的地址是不同的。")])]),n._v(" "),a("p",[n._v("如果想在任何地方改变全局变量的值，可以这样")]),n._v(" "),a("p",[n._v("举个栗子")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\t#定义全局变量 x\n    x = '123'\n    def fun():\n        #对x重新赋值\n        global x\n        print('修改前x：'，x)\n        x='456'\n    fun()\n    print('修改后x:',x)\n\n    #运行结果\n\n    123\n    456\n")])])])])}),[],!1,null,null,null);t.default=_.exports}}]);