(window.webpackJsonp=window.webpackJsonp||[]).push([[362],{335:function(a,t,n){"use strict";n.r(t);var e=n(13),s=Object(e.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"模式匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模式匹配"}},[a._v("#")]),a._v(" 模式匹配")]),a._v(" "),n("p",[a._v("基本的语法：")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("elem  match{\n\tcase x: XX => {  }\n\tcase y: YY => {   }\n\t//下划线表示其他\n\tcase _  => {   }\n\n}\n")])])]),n("h2",{attrs:{id:"简单匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简单匹配"}},[a._v("#")]),a._v(" 简单匹配")]),a._v(" "),n("ol",[n("li",[a._v("简单的匹配元素的值")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('package day04\n//匹配模式一：  匹配元素\nobject CaseDemo1 extends App {\n  val arr  = Array("birds","dog","rabbits","sdfsss","bbbbb")\n  val name = arr(Random.nextInt(arr.length))\n  println("随机取出："+name)\n  name match {\n    case "birds" => println("birds")\n    case "dog" => println("dog")\n    case "rabbits" => println("rabbits")\n    case _ => println("other----")\n  }\n\n}\n')])])]),n("h2",{attrs:{id:"数据类型匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据类型匹配"}},[a._v("#")]),a._v(" 数据类型匹配")]),a._v(" "),n("ol",[n("li",[a._v("匹配 "),n("code",[a._v("数据类型")]),a._v("，当 "),n("code",[a._v("类型匹配")]),a._v(" 时，处理相应的逻辑")]),a._v(" "),n("li",[a._v("传入的值 ，可以通过变量获取")]),a._v(" "),n("li",[a._v("匹配的数据类型可以是 "),n("code",[a._v("自定义类型的数据")])]),a._v(" "),n("li",[a._v("举个例子")])]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('//匹配   数据类型\nobject CaseDemo2 extends App {\n\n  //自定义的数据类型\n  val dog = new  Dog\n  val arr = Array(  "names"  ,    11    ,   2.3   , CaseDemo2  , dog)\n  val elem = arr(4)\n\n  elem match {\n    //引用变量\n    case  x:String => println("String:"+x)\n    case  y:Int  => println("Int:"+y)\n    case z:Double if (z>2.0) => println("double:"+z)\n    case  CaseDemo2 => println("casedemo")\n    case  d:Dog  => println("dog --- ")\n    case _ => println("other")\n  }\n}\n')])])]),n("h2",{attrs:{id:"集合匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集合匹配"}},[a._v("#")]),a._v(" 集合匹配")]),a._v(" "),n("h3",{attrs:{id:"list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[a._v("#")]),a._v(" List")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('val lst = List(1, 2, 3, 4)\n\n  // :: 代表不同的 集合拼接 ， 单个元素可以直接拼接在集合的前面\n  val lst2 = 1 :: lst\n  lst2 match {\n    case 0 :: x => println(s"0 -- $x")\n    //1  ----   List(1, 2, 3, 4)\n    case x :: y => println(s"$x  ----   $y")\n    case _ => println("other")\n')])])]),n("h3",{attrs:{id:"tuple"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tuple"}},[a._v("#")]),a._v(" tuple")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('  val  tup  = (3,2,6)\n  tup match {\n    case (1,_,_ ) => println("start with 1")\n    case (_ , _ ,3) => println("end with  3 ")\n    case  (a ,b ,c) => println(s"$a -  $b -  $c")\n  }\n')])])]),n("h2",{attrs:{id:"样例匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#样例匹配"}},[a._v("#")]),a._v(" 样例匹配")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('//定义 样例 类 和 对象\ncase class Task(id:Int,name:String )\ncase  class  HeartBeat(i:Int )\ncase  object  CheckTimeOut\n\nobject CaseDemo4  extends  App {\n\n  val a = Array(Task(1, "t1"), Task(2,"t2"),HeartBeat(100),HeartBeat(200) ,CheckTimeOut)\n  val elem  = a(1)\n  elem match {\n\n    case Task(id:Int , name:String ) => println(id ,name)\n    case  HeartBeat(i:Int ) => println("heart: "+i)\n    case  CheckTimeOut  => println("check time ")\n    case  _ => println("other")\n  }\n\n}\n')])])]),n("h2",{attrs:{id:"偏函数-匹配函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#偏函数-匹配函数"}},[a._v("#")]),a._v(" 偏函数&匹配函数")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('  //定义一个方法，匹配字符串返回相应的数字\n  def f1(num:String) :Int  = num match{\n    case "one" => 1\n    case  "two" => 2\n    case "three" => 3\n    case _ => 0\n  }\n\n  //偏函数： 第一个参数化类型表示 传入的数据类型，第二个表示返回的数据类型\n  def f2:PartialFunction[String ,Int] ={\n    case "one" => 1\n    case  "two" => 2\n    case "three" => 3\n    case _ => 0\n  }\n\n  println(f1("one"))\n\n  println(f2("two"))\n\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);