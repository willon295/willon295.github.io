(window.webpackJsonp=window.webpackJsonp||[]).push([[200],{582:function(t,e,n){"use strict";n.r(e);var a=n(13),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"环境配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#环境配置"}},[t._v("#")]),t._v(" 环境配置")]),t._v(" "),n("p",[n("code",[t._v("yarn")]),t._v(" 的工作是负责工作，内存调度\n"),n("code",[t._v("mapreduce")]),t._v(" 负责运算")]),t._v(" "),n("h2",{attrs:{id:"yarn-site-xml"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#yarn-site-xml"}},[t._v("#")]),t._v(" yarn-site.xml")]),t._v(" "),n("ol",[n("li",[t._v("设置 yarn 服务器的名称")]),t._v(" "),n("li",[t._v("设置 shuffle")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<configuration>\n<property>\n        <name>yarn.resourcemanager.hostname</name>\n        <value>hdpnn0</value>\n</property>\n\n<property>\n        <name>yarn.nodemanager.aux-services</name>\n        <value>mapreduce_shuffle</value>\n</property>\n\n</configuration>\n~                  \n")])])]),n("h2",{attrs:{id:"mapre-site-xml"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mapre-site-xml"}},[t._v("#")]),t._v(" mapre-site.xml")]),t._v(" "),n("p",[t._v("把所有的分布任务交给 "),n("code",[t._v("yarn")]),t._v(" 处理")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\n<configuration>\n\t<property>\n\t\t<name>mapreduce.framework.name</name>\n\t\t<value>yarn</value>\n\t</property>\n</configuration>\n")])])]),n("h2",{attrs:{id:"启动服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#启动服务"}},[t._v("#")]),t._v(" 启动服务")]),t._v(" "),n("ol",[n("li",[t._v("start-dfs.sh")]),t._v(" "),n("li",[t._v("start-yarn.sh")])]),t._v(" "),n("h1",{attrs:{id:"一个标准的mapreduce任务编写"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一个标准的mapreduce任务编写"}},[t._v("#")]),t._v(" 一个标准的mapreduce任务编写")]),t._v(" "),n("p",[t._v("该任务主要是切割字符，计算第二列字符的出现次数")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('\npackage cn.willon.hadoop.mapreduce;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.conf.Configured;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.IntWritable;\nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.Mapper;\nimport org.apache.hadoop.mapreduce.Reducer;\nimport org.apache.hadoop.mapreduce.lib.input.TextInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;\nimport org.apache.hadoop.util.Tool;\nimport org.apache.hadoop.util.ToolRunner;\n\nimport java.io.IOException;\n\npublic class Demo1 extends Configured implements Tool\n\n{\n\n    static class MyMapper extends Mapper<LongWritable, Text, Text, IntWritable> {\n\n        @Override\n        protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n            String line = value.toString();\n            String[] lines = line.split(",");\n            context.write(new Text(lines[1]), new IntWritable(1));\n\n        }\n    }\n\n    static class MyReducer extends Reducer<Text, IntWritable, Text, IntWritable> {\n\n        @Override\n        protected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {\n            int sum = 0;\n            for (IntWritable value : values) {\n                sum += value.get();\n            }\n            context.write(key, new IntWritable(sum));\n\n        }\n    }\n\n\n    /**\n     * 程序执行时，在这里做一系列的作业配置\n     *\n     * @param strings 参数\n     * @return 程序的运行状态\n     * @throws Exception 运行异常\n     */\n    @Override\n    public int run(String[] strings) throws Exception {\n\n        //获取配置信息\n        Configuration conf = getConf();\n\n        // 设置程序的输入输出路径 ，从输入的 参数获取， 运行程序时 ，需要指定单数  -Din=XXX   -Dout=XXX\n        Path input = new Path(conf.get("in"));\n        Path output = new Path(conf.get("out"));\n\n        //创建一个 任务\n        Job job = Job.getInstance(conf, "cite-mapreduce");\n        job.setJarByClass(this.getClass());\n\n        //设置 Mapper 相关配置信息\n        job.setMapperClass(MyMapper.class);\n        job.setMapOutputKeyClass(Text.class);\n        job.setMapOutputValueClass(IntWritable.class);\n        job.setInputFormatClass(TextInputFormat.class);\n        TextInputFormat.addInputPath(job, input);\n\n\n        //设置 Reducer 相关配置信息\n        job.setReducerClass(MyReducer.class);\n        job.setOutputKeyClass(Text.class);\n        job.setOutputValueClass(IntWritable.class);\n        job.setOutputFormatClass(TextOutputFormat.class);\n        TextOutputFormat.setOutputPath(job, output);\n\n        //waitForCompletion() => 因为使用终端提交任务，该方法提交作业并询问 是否等待终端 ， true是等待，false不等待，返回值是程序是否提交成功，0：成功 1：失败\n        return job.waitForCompletion(true) ? 0 : 1;\n    }\n\n\n    public static void main(String[] args) throws Exception {\n        System.exit(ToolRunner.run(new Demo1(), args));\n    }\n}\n\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);