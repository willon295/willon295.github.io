(window.webpackJsonp=window.webpackJsonp||[]).push([[357],{350:function(a,t,e){"use strict";e.r(t);var s=e(13),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"常用的集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用的集合"}},[a._v("#")]),a._v(" 常用的集合")]),a._v(" "),e("p",[a._v("集合分为可变集合 "),e("code",[a._v("scala.collection.mutable.XXX")]),a._v(", 不可变集合 "),e("code",[a._v("scala.collection.immutable.XXX")])]),a._v(" "),e("ol",[e("li",[a._v("Array")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val arr = Array(1,2,3,4)\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("List\n"),e("code",[a._v("Nil")]),a._v(" 表示空的 "),e("code",[a._v("List")]),a._v(" ,常用的方法有")])]),a._v(" "),e("ul",[e("li",[e("code",[a._v("head")]),a._v(": 第一个元素")]),a._v(" "),e("li",[e("code",[a._v("tail")]),a._v("： 除第一个之外所有元素")])]),a._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[a._v("Map")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('val  m = new HashMap[String, Int]("aa"-> 2,"bb"->3)\n')])])]),e("ol",{attrs:{start:"4"}},[e("li",[a._v("Set")])]),a._v(" "),e("h1",{attrs:{id:"常用的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用的方法"}},[a._v("#")]),a._v(" 常用的方法")]),a._v(" "),e("ol",[e("li",[e("code",[a._v("sum")]),a._v(" , "),e("code",[a._v("max")]),a._v(" , "),e("code",[a._v("min")])]),a._v(" "),e("li",[e("code",[a._v("sortWith")])])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr = Array(1, 3, 4, 5, 6)\n//前后两个元素按一定的逻辑排，如按降序排\narr.sortWith( _ > _)\n//所有元素按一定的规则排 ，如转成字符串之后排\narr.sortBy((x) => x.toString)\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[e("code",[a._v("map")]),a._v(", 将每个元素取出进行操作，返回新的集合")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr = Array(1, 3, 4, 5, 6)\narr.map(_ * 10)\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[e("code",[a._v("reduce")]),a._v(" ,将所有元素进行迭代操作")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arr = Array(1, 3, 4, 5, 6)\n//连乘\narr.reduce(_ * _)\n//相当于，前一次计算的结果会赋值给下一次\narr.reduceLeft((x,y) => x *y)\n// （（（1 × ３） × 4 ） × 5 ） × 6\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[e("code",[a._v("fold")]),a._v(", 和 "),e("code",[a._v("reduce")]),a._v(" 差不多，但是可以给定一个初始值")]),a._v(" "),e("li",[e("code",[a._v("aggregate")]),a._v(" ，一种分区聚合操作，传入两个函数参数")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val  lst = List(List(1,2,3),List(4,5),List(6,7,8))\n// 第一个括号的参数是初始值，代表第一个函数的第一个参数（待完善）\nlst.aggregate(100)( _ + _.sum , _ + _)\n")])])]),e("h1",{attrs:{id:"并行集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并行集合"}},[a._v("#")]),a._v(" 并行集合")]),a._v(" "),e("p",[a._v("并行化集合 的方法会多线程执行")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val  lst = List(1,2,3,4,5,9,8,0)\n//转换成并行化集合\nval par = lst.par\nprintln(par.sum)\n")])])]),e("h1",{attrs:{id:"nil"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nil"}},[a._v("#")]),a._v(" Nil")]),a._v(" "),e("p",[a._v("所有类型的Nil都是相同的，内容相同，hashCode也相同")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val a: List[String] = Nil\nval b: List[Int] = Nil\n//eq 比的是 对象的hashCode，== 比较的是内容\n\n(a == Nil) should be(true)\n(a eq Nil) should be(true)\n\n(b == Nil) should be(true)\n(b eq Nil) should be(true)\n\n(a == b) should be(true)\n(a eq b) should be(true)\n")])])]),e("h1",{attrs:{id:"多维数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多维数组"}},[a._v("#")]),a._v(" 多维数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//构建 4 个Array 对象，元素为数组对象，值为空\nval arr  = new Array[Array[Int]](4)\n\n//构建 3 × 4 的二维数组\nval arr2 = Array.ofDim[Int](3,4)\n")])])]),e("h1",{attrs:{id:"神奇的符号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#神奇的符号"}},[a._v("#")]),a._v(" 神奇的符号")]),a._v(" "),e("ol",[e("li",[e("code",[a._v("+=")]),a._v(":\n语法：  "),e("code",[a._v("集合 += 元素")])])]),a._v(" "),e("blockquote",[e("p",[a._v("元素放在尾部，原集合会被修改")])]),a._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("code",[a._v("++=")]),a._v("\n语法： "),e("code",[a._v("集合1 ++= 集合2")])])]),a._v(" "),e("blockquote",[e("p",[a._v("集合2放在尾部，原集合1被修改")])]),a._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("code",[a._v("+:")]),a._v("\n语法： "),e("code",[a._v("元素 +: 集合")])])]),a._v(" "),e("blockquote",[e("p",[a._v("元素放在集合首部，原集合不会被改变，返回新的集合")])]),a._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[e("code",[a._v("++:")]),a._v("\n语法： "),e("code",[a._v("集合1 ++: 集合2")])])]),a._v(" "),e("blockquote",[e("p",[a._v("集合1 放入集合2 的头部，原 集合2 不改变")])]),a._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[e("code",[a._v("+:()")]),a._v("\n语法： "),e("code",[a._v("集合.+:(元素)")])])]),a._v(" "),e("blockquote",[e("p",[a._v("元素放在集合首部，原集合不会被改变，返回新的集合")])]),a._v(" "),e("ol",{attrs:{start:"6"}},[e("li",[e("code",[a._v("++:()")]),a._v("\n语法： "),e("code",[a._v("集合1.++:(集合2)")])])]),a._v(" "),e("blockquote",[e("p",[a._v("集合2 放入集合1 的头部，原 集合1 不改变")])]),a._v(" "),e("ol",{attrs:{start:"7"}},[e("li",[e("code",[a._v("::")]),a._v("\n语法：  "),e("code",[a._v("Any::List[ | Seq]")])])]),a._v(" "),e("blockquote",[e("p",[a._v("在集合的 "),e("code",[a._v("前面")]),a._v(" 加入 Any 元素")])]),a._v(" "),e("ol",{attrs:{start:"8"}},[e("li",[e("code",[a._v(":::")]),a._v("\n语法： "),e("code",[a._v("集合:::集合")])])]),a._v(" "),e("blockquote",[e("p",[a._v("将两个 集合进行合并，返回一个List")])]),a._v(" "),e("h1",{attrs:{id:"符号的总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#符号的总结"}},[a._v("#")]),a._v(" 符号的总结")]),a._v(" "),e("ol",[e("li",[a._v("带 "),e("code",[a._v("=")]),a._v(" 的 会改变原集合")]),a._v(" "),e("li",[a._v("一个加号 "),e("code",[a._v("+")]),a._v(" 一般是 集合与元素， 两个加号 "),e("code",[a._v("++")]),a._v(" 是集合与集合操作")])]),a._v(" "),e("h1",{attrs:{id:"bitset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bitset"}},[a._v("#")]),a._v(" BitSet")]),a._v(" "),e("p",[a._v("位集： 包位于 "),e("code",[a._v("scala.collection.mutable")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//0000 0000 ....  0100\nval  bits = BitSet(2)\nbits.toBitMask //输出Array(3)\n//在第 6 位补 1\nbits += 6\n//传入的参数意思是：  在index处添加 1 ， 默认从低位开始索引\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);