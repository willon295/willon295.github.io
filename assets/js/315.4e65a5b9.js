(window.webpackJsonp=window.webpackJsonp||[]).push([[315],{274:function(t,e,s){"use strict";s.r(e);var o=s(13),r=Object(o.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_11-4-小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-4-小结"}},[t._v("#")]),t._v(" 11.4 小结")]),t._v(" "),s("p",[t._v("本章我们通过三个小节分别介绍了Go语言中如何处理错误，如何设计错误处理，然后第二小节介绍了如何通过GDB来调试程序，通过GDB我们可以单步调试、可以查看变量、修改变量、打印执行过程等，最后我们介绍了如何利用Go语言自带的轻量级框架"),s("code",[t._v("testing")]),t._v("来编写单元测试和压力测试，使用"),s("code",[t._v("go test")]),t._v("就可以方便的执行这些测试，使得我们将来代码升级修改之后很方便的进行回归测试。这一章也许对于你编写程序逻辑没有任何帮助，但是对于你编写出来的程序代码保持高质量是至关重要的，因为一个好的Web应用必定有良好的错误处理机制(错误提示的友好、可扩展性)、有好的单元测试和压力测试以保证上线之后代码能够保持良好的性能和按预期的运行。")]),t._v(" "),s("h2",{attrs:{id:"links"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#links"}},[t._v("#")]),t._v(" links")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/编程语言/Go/preface.html"}},[t._v("目录")])],1),t._v(" "),s("li",[t._v("上一节: "),s("RouterLink",{attrs:{to:"/编程语言/Go/11.3.html"}},[t._v("Go怎么写测试用例")])],1),t._v(" "),s("li",[t._v("下一节: "),s("RouterLink",{attrs:{to:"/编程语言/Go/12.0.html"}},[t._v("部署与维护")])],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);