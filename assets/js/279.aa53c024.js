(window.webpackJsonp=window.webpackJsonp||[]).push([[279],{541:function(s,e,t){"use strict";t.r(e);var o=t(13),i=Object(o.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_6-session和数据存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-session和数据存储"}},[s._v("#")]),s._v(" 6 session和数据存储")]),s._v(" "),t("p",[s._v("Web开发中一个很重要的议题就是如何做好用户的整个浏览过程的控制，因为HTTP协议是无状态的，所以用户的每一次请求都是无状态的，我们不知道在整个Web操作过程中哪些连接与该用户有关，我们应该如何来解决这个问题呢？Web里面经典的解决方案是cookie和session，cookie机制是一种客户端机制，把用户数据保存在客户端，而session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构来保存信息，每一个网站访客都会被分配给一个唯一的标志符,即sessionID,它的存放形式无非两种:要么经过url传递,要么保存在客户端的cookies里.当然,你也可以将Session保存到数据库里,这样会更安全,但效率方面会有所下降。")]),s._v(" "),t("p",[s._v("6.1小节里面讲介绍session机制和cookie机制的关系和区别，6.2讲解Go语言如何来实现session，里面讲实现一个简易的session管理器，6.3小节讲解如何防止session被劫持的情况，如何有效的保护session。我们知道session其实可以存储在任何地方，6.4小节里面实现的session是存储在内存中的，但是如果我们的应用进一步扩展了，要实现应用的session共享，那么我们可以把session存储在数据库中(memcache或者redis)，6.5小节将详细的讲解如何实现这些功能。")]),s._v(" "),t("h2",{attrs:{id:"目录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[s._v("#")]),s._v(" 目录")]),s._v(" "),t("p",[t("img",{attrs:{src:"images/navi6.png?raw=true",alt:""}})]),s._v(" "),t("h2",{attrs:{id:"links"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#links"}},[s._v("#")]),s._v(" links")]),s._v(" "),t("ul",[t("li",[t("RouterLink",{attrs:{to:"/编程语言/Go/preface.html"}},[s._v("目录")])],1),s._v(" "),t("li",[s._v("上一章: "),t("RouterLink",{attrs:{to:"/编程语言/Go/05.7.html"}},[s._v("第五章总结")])],1),s._v(" "),t("li",[s._v("下一节: "),t("RouterLink",{attrs:{to:"/编程语言/Go/06.1.html"}},[s._v("session和cookie")])],1)])])}),[],!1,null,null,null);e.default=i.exports}}]);