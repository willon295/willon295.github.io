(window.webpackJsonp=window.webpackJsonp||[]).push([[361],{338:function(a,t,e){"use strict";e.r(t);var n=e(13),s=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"父类的定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#父类的定义"}},[a._v("#")]),a._v(" 父类的定义")]),a._v(" "),e("p",[a._v("使用 "),e("code",[a._v("abstract")]),a._v(" 关键字定义的父类，方法可以不用实现，定义方法的名称参数返回值即可")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('\nabstract  class Animal {\n\n  def  run(): Unit ={\n    println("Animal run ---")\n  }\n\n  def sayHi():String\n\n\n}\n')])])]),e("h1",{attrs:{id:"继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[a._v("#")]),a._v(" 继承")]),a._v(" "),e("p",[a._v("继承使用关键字 "),e("code",[a._v("extends")])]),a._v(" "),e("h1",{attrs:{id:"接口的定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接口的定义"}},[a._v("#")]),a._v(" 接口的定义")]),a._v(" "),e("ol",[e("li",[a._v("接口使用  "),e("code",[a._v("trait")]),a._v(" 关键字定义")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("\ntrait Flyable {\n\n  def  fly(): String\n}\n")])])]),e("h1",{attrs:{id:"接口的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接口的实现"}},[a._v("#")]),a._v(" 接口的实现")]),a._v(" "),e("p",[a._v("接口的实现使用关键字 "),e("code",[a._v("with")]),a._v(" ，多实现使用多个with")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('class Dog extends Animal with Sleepable  with Eatable {\n\n  override def eat(): String = {\n    " dog  eat"\n  }\n  \n\n  override def sayHi(): Unit = {\n    println("dog  hi ---")\n  }\n\n  override def sleep(): String = {\n    "dog sleep "\n  }\n}\n\n')])])]),e("h1",{attrs:{id:"创建实例时动态实现接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建实例时动态实现接口"}},[a._v("#")]),a._v(" 创建实例时动态实现接口")]),a._v(" "),e("p",[a._v("scala支持创建实例时，动态的实现接口")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('var b = new Bird with Flyable {\n   override def fly(): String = {\n        "bird fly"\n   }\n}\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);