(window.webpackJsonp=window.webpackJsonp||[]).push([[208],{306:function(t,e,n){"use strict";n.r(e);var o=n(13),a=Object(o.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"需求分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#需求分析"}},[t._v("#")]),t._v(" 需求分析")]),t._v(" "),n("p",[t._v("当我们的业务逻辑十分复杂时，一个 job 显然不能完成，所以需要多个 MRJOb。")]),t._v(" "),n("h1",{attrs:{id:"举个例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#举个例子"}},[t._v("#")]),t._v(" 举个例子")]),t._v(" "),n("p",[t._v("下面的内容， "),n("code",[t._v("：")]),t._v(" 冒号左边是用户，右边是该用户的好友，需求 ==>  求两两用户间所有共同好友")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("A:B,C,D,F,E,O\nB:A,C,E,K\nC:F,A,D,I\nD:A,E,F,L\nE:B,C,D,M,L\nF:A,B,C,D,E,O,M\nG:A,C,D,E,F\nH:A,C,D,E,O\nI:A,O\nJ:B,O\nK:A,C,D\nL:D,E,F\nM:E,F,G\nO:A,H,I,J\n")])])]),n("h2",{attrs:{id:"分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分析"}},[t._v("#")]),t._v(" 分析")]),t._v(" "),n("ol",[n("li",[t._v("第一次\n"),n("ul",[n("li",[t._v("map： (friend1，user)")]),t._v(" "),n("li",[t._v("shuffle结果：(friend1，[u1,u2,u3..] ) => 集合内用户两两有共同好友 friend1")]),t._v(" "),n("li",[t._v("reduce: 好友两两作key，好友做 value =>（u1#u2,friend1）,(u1#u3,friend1)..")])])]),t._v(" "),n("li",[t._v("第二次\n-map： (u1#u2,friend1)\n"),n("ul",[n("li",[t._v("shuffle结果：(u1#u2,[f1,f2,f3...])")]),t._v(" "),n("li",[t._v("reduce: 将好友集合遍历即可")])])])]),t._v(" "),n("h2",{attrs:{id:"coding"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#coding"}},[t._v("#")]),t._v(" Coding")]),t._v(" "),n("p",[t._v("具体代码实现")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.conf.Configured;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.Mapper;\nimport org.apache.hadoop.mapreduce.Reducer;\nimport org.apache.hadoop.mapreduce.lib.input.TextInputFormat;\nimport org.apache.hadoop.mapreduce.lib.jobcontrol.ControlledJob;\nimport org.apache.hadoop.mapreduce.lib.jobcontrol.JobControl;\nimport org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;\nimport org.apache.hadoop.util.Tool;\nimport org.apache.hadoop.util.ToolRunner;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class CommonFriends extends Configured implements Tool {\n\n    //把用户作为 value ， 好友作为 key\n    static class StepOneMapper extends Mapper<LongWritable, Text, Text, Text> {\n\n        Text user = new Text();\n        Text friend = new Text();\n\n        @Override\n        protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n            String[] line = value.toString().split(":");\n            user.set(line[0]);\n            String[] friends = line[1].split(",");\n            for (String f : friends) {\n                friend.set(f);\n                context.write(friend, user);\n            }\n\n        }\n    }\n\n    static class StepOneReducer extends Reducer<Text, Text, Text, Text> {\n\n        Text twoUsers = new Text();\n\n        //结果是  (   friend ,[u1,u2,u3....]   ), user 两两之间有共同好友\n        // 输出结果是  (u1#u2 ,  commonFriend)\n        @Override\n        protected void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {\n\n            ArrayList<String> userList = new ArrayList<String>();\n\n            for (Text value : values) {\n                userList.add(value.toString());\n            }\n            //避免出现 A#B B#A 重复情况\n            Collections.sort(userList);\n\n\n            for (int i = 0; i < userList.size() - 1; i++) {\n                for (int j = (i + 1); j < userList.size(); j++) {\n                    twoUsers.set(userList.get(i) + "#" + userList.get(j));\n                    context.write(twoUsers, key);\n                }\n            }\n        }\n    }\n\n\n    static class StepTwoMapper extends Mapper<LongWritable, Text, Text, Text> {\n\n        Text twoUsers = new Text();\n        Text commonFriend = new Text();\n\n\n        //将数据  (u1#u2 ,  commonFriend) 放入 map\n        // shuffle 输出 结果是   (u1#u2 ,[cf1, cf2, cf3 ....]  )\n        @Override\n        protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n            String[] split = value.toString().split("\\t");\n            twoUsers.set(split[0]);\n            commonFriend.set(split[1]);\n            context.write(twoUsers, commonFriend);\n        }\n    }\n\n    static class StepTwoReducer extends Reducer<Text, Text, Text, Text> {\n\n        Text commonFriends = new Text();\n\n        //将结果直接输出\n        @Override\n        protected void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {\n\n            StringBuilder sb = new StringBuilder();\n            for (Text v : values) {\n                sb.append(v.toString()).append(",");\n            }\n            commonFriends.set(sb.substring(0, sb.length() - 1));\n            context.write(key, commonFriends);\n        }\n    }\n\n\n    public int run(String[] strings) throws Exception {\n        Configuration conf = getConf();\n        //文件的输入 输出 ，临时缓存 路径\n        Path in = new Path(conf.get("in"));\n        Path out = new Path(conf.get("out"));\n        Path tmp = new Path("/commonFriendTmp");\n\n        //创建  第 1 步 执行任务 job1\n        Job job1 = Job.getInstance(conf, "step-one-job");\n        job1.setJarByClass(this.getClass());\n        job1.setInputFormatClass(TextInputFormat.class);\n        job1.setMapperClass(StepOneMapper.class);\n        job1.setReducerClass(StepOneReducer.class);\n        job1.setOutputKeyClass(Text.class);\n        job1.setOutputValueClass(Text.class);\n        job1.setOutputFormatClass(TextOutputFormat.class);\n        TextInputFormat.addInputPath(job1, in);\n        //将处理结果存入临时文件夹\n        TextOutputFormat.setOutputPath(job1, tmp);\n\n        //创建 第 2 步 执行任务 job2\n        Job job2 = Job.getInstance(conf, "step-two-job");\n        job2.setJarByClass(this.getClass());\n        job2.setInputFormatClass(TextInputFormat.class);\n        job2.setMapperClass(StepTwoMapper.class);\n        job2.setReducerClass(StepTwoReducer.class);\n        job2.setOutputKeyClass(Text.class);\n        job2.setOutputValueClass(Text.class);\n        job2.setOutputFormatClass(TextOutputFormat.class);\n        //将上次处理完毕的临时结果作为本次的输入路径\n        TextInputFormat.addInputPath(job2, tmp);\n        TextOutputFormat.setOutputPath(job2, out);\n\n        //将两个任务转换成  可控制的 ControlledJob\n        ControlledJob cjob1 = new ControlledJob(job1.getConfiguration());\n        cjob1.setJob(job1);\n        ControlledJob cjob2 = new ControlledJob(job2.getConfiguration());\n        cjob2.setJob(job2);\n\n        //添加关系 依赖\n        cjob2.addDependingJob(cjob1);\n\n        //使用 jobController 控制两个任务\n        JobControl jc = new JobControl("G-CommonFriends");\n        jc.addJob(cjob1);\n        jc.addJob(cjob2);\n\n        //开启一个新的线程 运行 job\n        Thread t = new Thread(jc);\n        t.start();\n\n        //当所有的任务完成返回0, 如果有失败的 返回 1\n        while (true) {\n\n            if (jc.allFinished()) {\n                jc.stop();\n                return 0;\n            }\n            if (jc.getFailedJobList().size() > 0) {\n                jc.stop();\n                return 1;\n            }\n        }\n\n    }\n    public static void main(String[] args) throws Exception {\n\n        System.exit(ToolRunner.run(new CommonFriends(), args));\n\n    }\n\n\n}\n')])])]),n("h1",{attrs:{id:"多job串行的基本步骤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多job串行的基本步骤"}},[t._v("#")]),t._v(" 多job串行的基本步骤")]),t._v(" "),n("p",[t._v("以 2 个 job为例")]),t._v(" "),n("ol",[n("li",[t._v("创建  2 个 job ： job1 ,jo2")]),t._v(" "),n("li",[t._v("设置  2 个 job 相关配置")]),t._v(" "),n("li",[t._v("job之间的数据关系，此处 job2 输入为 job1 输出")]),t._v(" "),n("li",[t._v("将 2 个 job 转为 "),n("code",[t._v("可控制 ControlledJob")])])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("ControlledJob cjob1 = new ControlledJob(job1.getConfiguration());\ncjob1.setJob(job1);\nControlledJob cjob2 = new ControlledJob(job2.getConfiguration());\ncjob2.setJob(job2);\n")])])]),n("ol",{attrs:{start:"5"}},[n("li",[t._v("设置 "),n("code",[t._v("可控制 job")]),t._v("  依赖关系，此处job2等待job1完成才执行，所以 job2 依赖 job1")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("cjob2.addDependingJob(cjob1);\n")])])]),n("ol",{attrs:{start:"6"}},[n("li",[t._v("创建 job控制器 "),n("code",[t._v("JobControl")]),t._v(" （该类实现了 Runnable接口），并将可控job添加进控制器")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('JobControl jc = new JobControl("G-CommonFriends");\njc.addJob(cjob1);\njc.addJob(cjob2);\n')])])]),n("ol",{attrs:{start:"7"}},[n("li",[t._v("创建新的线程运行控制器")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Thread t = new Thread(jc);\nt.start();\n")])])]),n("ol",{attrs:{start:"8"}},[n("li",[t._v("后续操作")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("while (true) {\n\t\t//判断是否全部完成\n        if (jc.allFinished()) {\n            jc.stop();\n            return 0;\n        }\n        //判断是否有失败的任务\n        if (jc.getFailedJobList().size() > 0) {\n            jc.stop();\n            return 1;\n        }\n    }\n")])])]),n("h1",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("p",[t._v("代码都是套路代码，精华的是 处理问题的算法和思想， 套路记不住可以看笔记")])])}),[],!1,null,null,null);e.default=a.exports}}]);