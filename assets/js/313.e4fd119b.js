(window.webpackJsonp=window.webpackJsonp||[]).push([[313],{284:function(n,t,a){"use strict";a.r(t);var s=a(13),e=Object(s.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"_11-2-使用gdb调试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-使用gdb调试"}},[n._v("#")]),n._v(" 11.2 使用GDB调试")]),n._v(" "),a("p",[n._v("开发程序过程中调试代码是开发者经常要做的一件事情，Go语言不像PHP、Python等动态语言，只要修改不需要编译就可以直接输出，而且可以动态的在运行环境下打印数据。当然Go语言也可以通过Println之类的打印数据来调试，但是每次都需要重新编译，这是一件相当麻烦的事情。我们知道在Python中有pdb/ipdb之类的工具调试，Javascript也有类似工具，这些工具都能够动态的显示变量信息，单步调试等。不过庆幸的是Go也有类似的工具支持：GDB。Go内部已经内置支持了GDB，所以，我们可以通过GDB来进行调试，那么本小节就来介绍一下如何通过GDB来调试Go程序。")]),n._v(" "),a("p",[n._v("另外建议纯go代码使用"),a("a",{attrs:{href:"https://github.com/derekparker/delve",target:"_blank",rel:"noopener noreferrer"}},[n._v("delve"),a("OutboundLink")],1),n._v("可以很好的进行Go代码调试")]),n._v(" "),a("h2",{attrs:{id:"gdb调试简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gdb调试简介"}},[n._v("#")]),n._v(" GDB调试简介")]),n._v(" "),a("p",[n._v("GDB是FSF(自由软件基金会)发布的一个强大的类UNIX系统下的程序调试工具。使用GDB可以做如下事情：")]),n._v(" "),a("ol",[a("li",[n._v("启动程序，可以按照开发者的自定义要求运行程序。")]),n._v(" "),a("li",[n._v("可让被调试的程序在开发者设定的调置的断点处停住。（断点可以是条件表达式）")]),n._v(" "),a("li",[n._v("当程序被停住时，可以检查此时程序中所发生的事。")]),n._v(" "),a("li",[n._v("动态的改变当前程序的执行环境。")])]),n._v(" "),a("p",[n._v("目前支持调试Go程序的GDB版本必须大于7.1。")]),n._v(" "),a("p",[n._v("编译Go程序的时候需要注意以下几点")]),n._v(" "),a("ol",[a("li",[n._v('传递参数-ldflags "-s"，忽略debug的打印信息')]),n._v(" "),a("li",[n._v('传递-gcflags "-N -l" 参数，这样可以忽略Go内部做的一些优化，聚合变量和函数等优化，这样对于GDB调试来说非常困难，所以在编译的时候加入这两个参数避免这些优化。')])]),n._v(" "),a("h2",{attrs:{id:"常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[n._v("#")]),n._v(" 常用命令")]),n._v(" "),a("p",[n._v("GDB的一些常用命令如下所示")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("list")]),n._v(" "),a("p",[n._v("简写命令"),a("code",[n._v("l")]),n._v("，用来显示源代码，默认显示十行代码，后面可以带上参数显示的具体行，例如："),a("code",[n._v("list 15")]),n._v("，显示十行代码，其中第15行在显示的十行里面的中间，如下所示。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('  10\t        time.Sleep(2 * time.Second)\n  11\t        c <- i\n  12\t    }\n  13\t    close(c)\n  14\t}\n  15\t\n  16\tfunc main() {\n  17\t    msg := "Starting main"\n  18\t    fmt.Println(msg)\n  19\t    bus := make(chan int)\n')])])])]),n._v(" "),a("li",[a("p",[n._v("break")]),n._v(" "),a("p",[n._v("简写命令 "),a("code",[n._v("b")]),n._v(",用来设置断点，后面跟上参数设置断点的行数，例如"),a("code",[n._v("b 10")]),n._v("在第十行设置断点。")])]),n._v(" "),a("li",[a("p",[n._v("delete\n简写命令 "),a("code",[n._v("d")]),n._v(",用来删除断点，后面跟上断点设置的序号，这个序号可以通过"),a("code",[n._v("info breakpoints")]),n._v("获取相应的设置的断点序号，如下是显示的设置断点序号。")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("  Num     Type           Disp Enb Address            What\n  2       breakpoint     keep y   0x0000000000400dc3 in main.main at /home/xiemengjun/gdb.go:23\n  breakpoint already hit 1 time\n")])])])]),n._v(" "),a("li",[a("p",[n._v("backtrace")]),n._v(" "),a("p",[n._v("简写命令 "),a("code",[n._v("bt")]),n._v(",用来打印执行的代码过程，如下所示：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("  #0  main.main () at /home/xiemengjun/gdb.go:23\n  #1  0x000000000040d61e in runtime.main () at /home/xiemengjun/go/src/pkg/runtime/proc.c:244\n  #2  0x000000000040d6c1 in schedunlock () at /home/xiemengjun/go/src/pkg/runtime/proc.c:267\n  #3  0x0000000000000000 in ?? ()\n")])])])]),n._v(" "),a("li",[a("p",[n._v("info")]),n._v(" "),a("p",[n._v("info命令用来显示信息，后面有几种参数，我们常用的有如下几种：")]),n._v(" "),a("ul",[a("li",[a("p",[a("code",[n._v("info locals")])]),n._v(" "),a("p",[n._v("显示当前执行的程序中的变量值")])]),n._v(" "),a("li",[a("p",[a("code",[n._v("info breakpoints")])]),n._v(" "),a("p",[n._v("显示当前设置的断点列表")])]),n._v(" "),a("li",[a("p",[a("code",[n._v("info goroutines")])]),n._v(" "),a("p",[n._v("显示当前执行的goroutine列表，如下代码所示,带*的表示当前执行的")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("  * 1  running runtime.gosched\n  * 2  syscall runtime.entersyscall\n    3  waiting runtime.gosched\n    4 runnable runtime.gosched\n")])])])])])]),n._v(" "),a("li",[a("p",[n._v("print")]),n._v(" "),a("p",[n._v("简写命令"),a("code",[n._v("p")]),n._v("，用来打印变量或者其他信息，后面跟上需要打印的变量名，当然还有一些很有用的函数$len()和$cap()，用来返回当前string、slices或者maps的长度和容量。")])]),n._v(" "),a("li",[a("p",[n._v("whatis")]),n._v(" "),a("p",[n._v("用来显示当前变量的类型，后面跟上变量名，例如"),a("code",[n._v("whatis msg")]),n._v(",显示如下：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("  type = struct string\n")])])])]),n._v(" "),a("li",[a("p",[n._v("next")]),n._v(" "),a("p",[n._v("简写命令 "),a("code",[n._v("n")]),n._v(",用来单步调试，跳到下一步，当有断点之后，可以输入"),a("code",[n._v("n")]),n._v("跳转到下一步继续执行")])]),n._v(" "),a("li",[a("p",[n._v("continue")]),n._v(" "),a("p",[n._v("简称命令 "),a("code",[n._v("c")]),n._v("，用来跳出当前断点处，后面可以跟参数N，跳过多少次断点")])]),n._v(" "),a("li",[a("p",[n._v("set variable")]),n._v(" "),a("p",[n._v("该命令用来改变运行过程中的变量值，格式如："),a("code",[n._v("set variable <var>=<value>")])])])]),n._v(" "),a("h2",{attrs:{id:"调试过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调试过程"}},[n._v("#")]),n._v(" 调试过程")]),n._v(" "),a("p",[n._v("我们通过下面这个代码来演示如何通过GDB来调试Go程序，下面是将要演示的代码：")]),n._v(" "),a("div",{staticClass:"language-Go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[n._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("package")]),n._v(" main\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("import")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"fmt"')]),n._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"time"')]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("func")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("counting")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("c "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("chan")]),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<-")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("for")]),n._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\t\ttime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("Sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("*")]),n._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("Second"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\t\tc "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<-")]),n._v(" i\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("func")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\tmsg "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"Starting main"')]),n._v("\n\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\tbus "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("make")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("chan")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[n._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\tmsg "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"starting a gofunc"')]),n._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("go")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("counting")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("for")]),n._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("range")]),n._v(" bus "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\t\tfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("Println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[n._v('"count:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])]),a("p",[n._v("编译文件，生成可执行文件gdbfile:")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('go build -gcflags "-N -l" gdbfile.go\n')])])]),a("p",[n._v("通过gdb命令启动调试：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("gdb gdbfile\n")])])]),a("p",[n._v("启动之后首先看看这个程序是不是可以运行起来，只要输入"),a("code",[n._v("run")]),n._v("命令回车后程序就开始运行，程序正常的话可以看到程序输出如下，和我们在命令行直接执行程序输出是一样的：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("(gdb) run\nStarting program: /home/xiemengjun/gdbfile \nStarting main\ncount: 0\ncount: 1\ncount: 2\ncount: 3\ncount: 4\ncount: 5\ncount: 6\ncount: 7\ncount: 8\ncount: 9\n[LWP 2771 exited]\n[Inferior 1 (process 2771) exited normally]\t\n")])])]),a("p",[n._v("好了，现在我们已经知道怎么让程序跑起来了，接下来开始给代码设置断点：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('(gdb) b 23\nBreakpoint 1 at 0x400d8d: file /home/xiemengjun/gdbfile.go, line 23.\n(gdb) run\nStarting program: /home/xiemengjun/gdbfile \nStarting main\n[New LWP 3284]\n[Switching to LWP 3284]\n\nBreakpoint 1, main.main () at /home/xiemengjun/gdbfile.go:23\n23\t        fmt.Println("count:", count)\n')])])]),a("p",[n._v("上面例子"),a("code",[n._v("b 23")]),n._v("表示在第23行设置了断点，之后输入"),a("code",[n._v("run")]),n._v("开始运行程序。现在程序在前面设置断点的地方停住了，我们需要查看断点相应上下文的源码，输入"),a("code",[n._v("list")]),n._v("就可以看到源码显示从当前停止行的前五行开始：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('(gdb) list\n18\t    fmt.Println(msg)\n19\t    bus := make(chan int)\n20\t    msg = "starting a gofunc"\n21\t    go counting(bus)\n22\t    for count := range bus {\n23\t        fmt.Println("count:", count)\n24\t    }\n25\t}\n')])])]),a("p",[n._v("现在GDB在运行当前的程序的环境中已经保留了一些有用的调试信息，我们只需打印出相应的变量，查看相应变量的类型及值：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("(gdb) info locals\ncount = 0\nbus = 0xf840001a50\n(gdb) p count\n$1 = 0\n(gdb) p bus\n$2 = (chan int) 0xf840001a50\n(gdb) whatis bus\ntype = chan int\n")])])]),a("p",[n._v("接下来该让程序继续往下执行，请继续看下面的命令")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('(gdb) c\nContinuing.\ncount: 0\n[New LWP 3303]\n[Switching to LWP 3303]\n\nBreakpoint 1, main.main () at /home/xiemengjun/gdbfile.go:23\n23 fmt.Println("count:", count)\n(gdb) c\nContinuing.\ncount: 1\n[Switching to LWP 3302]\n\nBreakpoint 1, main.main () at /home/xiemengjun/gdbfile.go:23\n23 fmt.Println("count:", count)\n')])])]),a("p",[n._v("每次输入"),a("code",[n._v("c")]),n._v("之后都会执行一次代码，又跳到下一次for循环，继续打印出来相应的信息。")]),n._v(" "),a("p",[n._v("设想目前需要改变上下文相关变量的信息，跳过一些过程，并继续执行下一步，得出修改后想要的结果：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('(gdb) info locals\ncount = 2\nbus = 0xf840001a50\n(gdb) set variable count=9\n(gdb) info locals\ncount = 9\nbus = 0xf840001a50\n(gdb) c\nContinuing.\ncount: 9\n[Switching to LWP 3302]\n\nBreakpoint 1, main.main () at /home/xiemengjun/gdbfile.go:23\n23 fmt.Println("count:", count)\t\t\n')])])]),a("p",[n._v("最后稍微思考一下，前面整个程序运行的过程中到底创建了多少个goroutine，每个goroutine都在做什么：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("(gdb) info goroutines\n* 1 running runtime.gosched\n* 2 syscall runtime.entersyscall \n3 waiting runtime.gosched \n4 runnable runtime.gosched\n(gdb) goroutine 1 bt\n#0 0x000000000040e33b in runtime.gosched () at /home/xiemengjun/go/src/pkg/runtime/proc.c:927\n#1 0x0000000000403091 in runtime.chanrecv (c=void, ep=void, selected=void, received=void)\nat /home/xiemengjun/go/src/pkg/runtime/chan.c:327\n#2 0x000000000040316f in runtime.chanrecv2 (t=void, c=void)\nat /home/xiemengjun/go/src/pkg/runtime/chan.c:420\n#3 0x0000000000400d6f in main.main () at /home/xiemengjun/gdbfile.go:22\n#4 0x000000000040d0c7 in runtime.main () at /home/xiemengjun/go/src/pkg/runtime/proc.c:244\n#5 0x000000000040d16a in schedunlock () at /home/xiemengjun/go/src/pkg/runtime/proc.c:267\n#6 0x0000000000000000 in ?? ()\n")])])]),a("p",[n._v("通过查看goroutines的命令我们可以清楚地了解goruntine内部是怎么执行的，每个函数的调用顺序已经明明白白地显示出来了。")]),n._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[n._v("#")]),n._v(" 小结")]),n._v(" "),a("p",[n._v("本小节我们介绍了GDB调试Go程序的一些基本命令，包括"),a("code",[n._v("run")]),n._v("、"),a("code",[n._v("print")]),n._v("、"),a("code",[n._v("info")]),n._v("、"),a("code",[n._v("set variable")]),n._v("、"),a("code",[n._v("coutinue")]),n._v("、"),a("code",[n._v("list")]),n._v("、"),a("code",[n._v("break")]),n._v("\t等经常用到的调试命令，通过上面的例子演示，我相信读者已经对于通过GDB调试Go程序有了基本的理解，如果你想获取更多的调试技巧请参考官方网站的GDB调试手册，还有GDB官方网站的手册。")]),n._v(" "),a("h2",{attrs:{id:"links"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#links"}},[n._v("#")]),n._v(" links")]),n._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/编程语言/Go/preface.html"}},[n._v("目录")])],1),n._v(" "),a("li",[n._v("上一节: "),a("RouterLink",{attrs:{to:"/编程语言/Go/11.1.html"}},[n._v("错误处理")])],1),n._v(" "),a("li",[n._v("下一节: "),a("RouterLink",{attrs:{to:"/编程语言/Go/11.3.html"}},[n._v("Go怎么写测试用例")])],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);